# homepage
homepage:
  url:   /
  param: { module: default, action: index }

# secured welcome
welcome:
  url:   /welcome
  param: { module: default, action: welcome }

# QR-code
#
# show
qrcode:
  url:   /qr/:code
  param: { module: default, action: qrcode }


# товар
#
# список товаров
product_list:
  url:   /products/list/:products
  param: { module: product, action: list }
#
# каталог товаров
productCatalog:
  url:   /catalog/
  param: { module: productCatalog, action: index }
#
# фильтр каталога товаров
productCatalog_filter:
  url:   /catalog/:productCategory/_filter
  param: { module: productCatalog, action: filter }
  class:   myProductCatalogRoute
  options: { model: ProductCategory, type: object, method: getForRoute }
#
# тэги каталога товаров
productCatalog_tag:
  url:   /catalog/:productCategory/_tag
  param: { module: productCatalog, action: tag }
  class:   myProductCatalogRoute
  options: { model: ProductCategory, type: object, method: getForRoute }
#
# количество найденных товаров
productCatalog_count:
  url:   /catalog/:productCategory/_count
  param: { module: productCatalog, action: count }
  class:   myProductCatalogRoute
  options: { model: ProductCategory, type: object, method: getForRoute }
#
# категория каталога товаров
productCatalog_category:
  url:   /catalog/:productCategory/
  param: { module: productCatalog, action: category}
  class:   myProductCatalogRoute
  options: { model: ProductCategory, type: object, method: getForRoute }

# категория каталога товаров ajax
productCatalog_categoryAjax:
  url:   /catalogajax/:productCategory/:page/:view/:num/
  param: { module: productCatalog, action: categoryAjax, num: 18, view: compact, page: 1}
  class:   myProductCatalogRoute
  options: { model: ProductCategory, type: object, method: getForRoute }
  
# карусель ajax
productCatalog_carousel:
  url:   /catalog-carousel/:productCategory/
  param: { module: productCategory, action: carousel}
  class:   myProductCatalogRoute
  options: { model: ProductCategory, type: object, method: getForRoute }
#
# категория и производитель каталога товаров
productCatalog_creator:
  url:   /catalog/:productCategory/:creator/
  param: { module: productCatalog, action: creator }
  class:   myProductCatalogRoute
  options: { model: ProductCategory, type: object, method: getForRoute }
#
# карточка товара
productCard:
  url:   /products/:product
  param: { module: productCard, action: index }
  class:   myDoctrineRoute
  options: { model: Product, type: object, method: getForRoute }
#
# карточка товара по ид товара
productCard_show:
  url:   /product-:product
  param: { module: productCard, action: show }
  options:
    segment_separators: [ '/', '-' ]
#
# комментарии товара
productComment:
  url:   /products/:product/comments
  param: { module: productComment, action: index }
  class:   myDoctrineRoute
  options: { model: Product, type: object, method: getForRoute }
#
# новый комментарий товара
productComment_new:
  url:   /products/:product/comments/new
  param: { module: productComment, action: new }
  class:   myDoctrineRoute
  options: { model: Product, type: object, method: getForRoute }
  requirements:
    sf_method: [ post, get ]
#
# создать комментарий товара
productComment_create:
  url:   /products/:product/comments/create
  param: { module: productComment, action: create }
  class:   myDoctrineRoute
  options: { model: Product, type: object, method: getForRoute }
  requirements:
    sf_method: [ post ]
#
# оценить комментарий товара
productComment_helpful:
  url:   /products/:product/comments/:productComment/helpful
  param: { module: productComment, action: helpful }
  class:   myDoctrineRoute
  options: { model: ProductComment, type: object, method: getForRoute }
#


# наличие на складах
productStock:
  url:   /products/:product/stock
  param: { module: productStock, action: index }
  class:   myDoctrineRoute
  options: { model: Product, type: object, method: getForRoute }
#
# аналогичные товары
similarProduct:
  url:   /products/:product/similar
  param: { module: similarProduct, action: index }
  class:   myDoctrineRoute
  options: { model: Product, type: object, method: getForRoute }
#
# обновление товара по измененной характеристики для группы товаров
changeProduct:
  url:   /products/:product/change/:property/:value
  param: { module: product, action: change }
  class: myDoctrineRoute
  options: { model: Product, type: object, method: getForRoute }


# Магазин
#
# список магазинов
shop:
  url:   /shops/
  param: { module: shop, action: index }
#
# карточка магазина
shop_show:
  url:   /shops/:shop/
  param: { module: shop, action: show }
  class:   myDoctrineRoute
  options: { model: Shop, type: object, method: getForRoute }


# Новость
#
# news category
newsCategory:
  url:   /news/
  param: { module: newsCategory, action: index }
#
# news category show
newsCategory_show:
  url:   /news/:newsCategory/
  param: { module: newsCategory, action: show }
  class:   myNewsRoute
  options: { model: NewsCategory, type: object, method: getForRoute }
#
# news list by year
newsCategory_year:
  url:   /news/:newsCategory/:year
  param: { module: newsCategory, action: year }
  class:   myNewsRoute
  options: { model: NewsCategory, type: object, method: getForRoute }
#
# news list by month
newsCategory_month:
  url:   /news/:newsCategory/:year/:month
  param: { module: newsCategory, action: month }
  class:   myNewsRoute
  options: { model: NewsCategory, type: object, method: getForRoute }
#
# news
news_show:
  url:   /news/:newsCategory/:year/:month/:news
  param: { module: news, action: show }
  class:   myNewsRoute
  options: { model: News, type: object, method: getForRoute }



# Пользователь
#
# user
user:
  url:   /private/
  param: { module: user, action: index }
  requirements:
    sf_method: [ get,post ]
#

# user edit
user_edit:
  url:   /private/edit
  param: { module: user, action: edit }
  requirements:
    sf_method: [ get,post ]
#

# user edit
user_update:
  url:   /private/update
  param: { module: user, action: update }
  requirements:
    sf_method: [ get,post ]
#
# user orders
user_orders:
  url:   /private/orders/
  param: { module: user, action: orders }
#


# user. get short info about cart, wishlist, etc.
userProductHistory_shortinfo:
  url:   /user/shortinfo
  param: { module: userProductHistory, action: shortinfo }
  requirements:
    sf_method: [ get,post ]

# user signin
user_signin:
  url:   /login/:provider
  param: { module: guard, action: signin, provider: null }

# user signin ajax
user_signinajax:
  url:   /loginajax/:login/:password/:remember
  param: { module: guard, action: signinAjax, provider: null, remember: 0 }
  requirements:
    sf_method: [ get,post ]
#
# user signout
user_signout:
  url:   /logout
  param: { module: guard, action: signout }
#
# user forgot password
user_forgotPassword:
  url:   /request-password
  param: { module: guard, action: forgotPassword }
  requirements:
    sf_method: [ get,post ]

user_resetPassword:
  url:   /reset-password
  param: { module: guard, action: resetPassword }
  requirements:
    sf_method: [ get,post ]
#
# user change password
user_changePassword:
  url:   /private/password
  param: { module: guard, action: changePassword }
#
# user change password
user_changePasswordSave:
  url:   /private/password/save
  param: { module: guard, action: changePasswordSave }
#
# user register
user_register:
  url:   /register
  param: { module: guard, action: register }
#
# user quick register
user_quickRegister:
  url:   /quick-register
  param: { module: guard, action: quickRegister }
#
# user oauth callback
user_oauth_callback:
  url:   /signin/:provider/callback
  param: { module: guard, action: oauthCallback }


#
# user product history
userProductHistory:
  url:   /private/product-history
  param: { module: userProductHistory, action: index }
#
# user product history clear
userProductHistory_clear:
  url:   /private/product-history/clear
  param: { module: userProductHistory, action: clear }

#
# user delayed product
userDelayedProduct:
  url:   /private/delayed-products
  param: { module: userDelayedProduct, action: index }
#
# user delayed product create
userDelayedProduct_create:
  url:   /private/delayed-products/create/:product
  param: { module: userDelayedProduct, action: create }
  class:   myDoctrineRoute
  options: { model: Product, type: object, method: getForRoute }
#
# user delayed product delete
userDelayedProduct_delete:
  url:   /private/delayed-products/delete/:product
  param: { module: userDelayedProduct, action: delete }
  class:   myDoctrineRoute
  options: { model: Product, type: object, method: getForRoute }
#
# user delayed product clear
userDelayedProduct_clear:
  url:   /private/delayed-products/clear
  param: { module: userDelayedProduct, action: clear }


#
# user product notice
userProductNotice:
  url:   /private/product-notices
  param: { module: userProductNotice, action: index }
#
# user product notice show
userProductNotice_show:
  url:   /private/product-notices/show/:product
  param: { module: userProductNotice, action: show }
  class:   myDoctrineRoute
  options: { model: Product, type: object, method: getForRoute }
#
# user product notice create
userProductNotice_create:
  url:   /private/product-notices/create/:product
  param: { module: userProductNotice, action: create }
  class:   myDoctrineRoute
  options: { model: Product, type: object, method: getForRoute }
  requirements:
    sf_method: [ post ]
#
# user product notice delete
userProductNotice_delete:
  url:   /private/product-notices/delete/:product
  param: { module: userProductNotice, action: delete }
  class:   myDoctrineRoute
  options: { model: Product, type: object, method: getForRoute }
#
# user product notice clear
userProductNotice_clear:
  url:   /private/product-notices/clear
  param: { module: userProductNotice, action: clear }
  class:   myDoctrineRoute
  options: { model: Product, type: object, method: getForRoute }

#
# user tag
userTag:
  url:   /private/tags
  param: { module: userTag, action: index }
#
# user tag create
userTag_create:
  url:     /private/tags/create
  param:   { module: userTag, action: create }
#
# user tag update
userTag_update:
  url:     /private/tags/:userTag/update
  param:   { module: userTag, action: update }
  class:   myDoctrineRoute
  options: { model: UserTag, type: object, method: getForRoute }
# user tag delete
userTag_delete:
  url:     /private/tags/:userTag/delete
  param:   { module: userTag, action: delete }
  class:   myDoctrineRoute
  options: { model: UserTag, type: object, method: getForRoute }
#
# user tag link product
userTag_linkProduct:
  url:     /private/tags/:userTag/link/:product
  param:   { module: userTag, action: linkProduct }
  class:   myDoctrineRoute
  options: { model: UserTag, type: object, method: getForRoute }
#
# user tag unlink product
userTag_unlinkProduct:
  url:     /private/tags/:userTag/unlink/:product
  param:   { module: userTag, action: unlinkProduct }
  class:   myDoctrineRoute
  options: { model: UserTag, type: object, method: getForRoute }
#



#
# product helper
productHelper:
  url:   /helper
  param: { module: productHelper, action: index }
#
# product helper show
productHelper_show:
  url:   /helper/:productHelper
  param: { module: productHelper, action: show }
  class:   myDoctrineRoute
  options: { model: ProductHelper, type: object, method: getForRoute }
#
# product helper answer
productHelper_answer:
  url:     /helper/:productHelper/answer
  param:   { module: productHelper, action: answer }
  class:   myDoctrineRoute
  options: { model: ProductHelper, type: object, method: getForRoute }
  requirements:
    sf_method: [ post ]
#
# product helper result
productHelper_result:
  url:     /helper/:productHelper/result
  param:   { module: productHelper, action: result }
  class:   myDoctrineRoute
  options: { model: ProductHelper, type: object, method: getForRoute }
  requirements:
    sf_method: [ post ]



#
# user product compare
userProductCompare:
  url:   /compare
  param: { module: userProductCompare, action: index }
#
# user product compare show
userProductCompare_show:
  url:   /compare/show/:productType
  param: { module: userProductCompare, action: show }
  class:   myDoctrineRoute
  options: { model: ProductType, type: object, method: getForRoute }
#
# user product compare add
userProductCompare_add:
  url:   /compare/add/:product
  param: { module: userProductCompare, action: add }
  class:   myDoctrineRoute
  options: { model: Product, type: object, method: getForRoute }
#
# user product compare delete
userProductCompare_delete:
  url:   /compare/delete/:product
  param: { module: userProductCompare, action: delete }
  class:   myDoctrineRoute
  options: { model: Product, type: object, method: getForRoute }



#
# user product rating create
userProductRating_createtotal:
  url:   /product-rating/createtotal/:rating/:product
  param: { module: userProductRating, action: createtotal, product : 0}
  class:   myDoctrineRoute
  options: { model: Product, type: object, method: getForRoute }
  requirements:
    sf_method: [ get,post ]

#
# user product rating create
userProductRating_create:
  url:   /product-rating/create/:rating
  param: { module: userProductRating, action: create }
  class:   myDoctrineRoute
  options: { model: Product, type: object, method: getForRoute }
  requirements:
    sf_method: [ any ]

#
# user address
userAddress:
  url:   /private/address
  param: { module: userAddress, action: index }
#
# user address create
userAddress_create:
  url:   /private/address/create
  param: { module: userAddress, action: create }
#
# user address update
userAddress_update:
  url:   /private/address/update/:userAddress
  param: { module: userAddress, action: update }
  class:   myDoctrineRoute
  options: { model: UserAddress, type: object, method: getForRoute }
  requirements:
    sf_method: [ post ]
#
# user address edit
userAddress_edit:
  url:   /private/address/edit/:userAddress
  param: { module: userAddress, action: edit }
  class:   myDoctrineRoute
  options: { model: UserAddress, type: object, method: getForRoute }
#
# user address delete
userAddress_delete:
  url:   /private/address/delete/:userAddress
  param: { module: userAddress, action: delete }
  class:   myDoctrineRoute
  options: { model: UserAddress, type: object, method: getForRoute }


# Заказы пользователя
#
# order login
order_login:
  url:   /orders/login
  param: { module: order, action: login }
#
# order new
order_new:
  url:   /orders/new/:step
  param: { module: order, action: new, step: 1 }
#
# order field
order_updateField:
  url:   /orders/update-field/:step
  param: { module: order, action: updateField, step: 1 }
  requirements:
    sf_method: [ post ]
#
# order edit
order_edit:
  url:   /orders/edit/:step
  param: { module: order, action: edit, step: 1 }
#
# order confirm
order_confirm:
  url:   /orders/confirm
  param: { module: order, action: confirm }
#
# order create
order_create:
  url:   /orders/create
  param: { module: order, action: create }
#
# order complete
order_complete:
  url:   /orders/complete
  param: { module: order, action: complete }
#
# order cancel
order_cancel:
  url:   /orders/cancel/:token
  param: { module: order, action: cancel, token: 0 }
#
# order complete
order_error:
  url:   /orders/error
  param: { module: order, action: error }
#
# order show
order_show:
  url:   /orders/:order
  param: { module: order, action: show }
  class:   myDoctrineRoute
  options: { model: Order, type: object, method: getForRoute }


# Корзина товаров
#
# cart
cart:
  url:   /cart
  param: { module: cart, action: index }
#
# cart add
cart_add:
  url:   /cart/add/:product/:quantity/:services
  param: { module: cart, action: add, quantity: 1, services: '{"4ebae7d1071a3-ustanovka-vityagki-ploskoy":1,"4eb3089eb2255-ustanovka-vityagki-vstraivaemoy-v-shkaf":3}' }
  requirements:
    sf_method: [ post ]  
#
# cart delete
cart_delete:
  url:   /cart/delete/:product
  param: { module: cart, action: delete }
#
# cart clear
cart_clear:
  url:   /cart/clear
  param: { module: cart, action: clear }
#
# cart service add
cart_service_add:
  url:   /cart/add/:product/:service/:quantity
  param: { module: cart, action: serviceAdd }
#
# cart servcie delete
cart_service_delete:
  url:   /cart/delete/:product/:service
  param: { module: cart, action: serviceDelete }


#
# F1 servis show
service_show:
  url:      /f1/show/:service
  param:    { module: service, action: show }
  class:    myDoctrineRoute
  options:  { model: Service, type: object, method: getForRoute }
#
# F1 servis catalog
#service_category:
#  url:      /f1
#  param:    { module: service, action: category }
#
# F1 servis catalog
service_list:
  url:      /f1_tmp/:serviceCategory
  param:    { module: service, action: index, serviceCategory: 0 }
  class:    myDoctrineRoute
  options:  { model: ServiceCategory, type: object, method: getForRoute }

#
# region autocomplete
region_autocomplete:
  url:      /region/autocomplete/:type
  param:    { module: region, action: autocomplete, type: null }


#
# payment
payment:
  url:      /payment
  param:    { module: payment, action: index }
#
# payment callback
payment_callback:
  url:   /orders/complete
  param: { module: order, action: complete }
#  url:      /payment/callback
#  param:    { module: payment, action: callback }


#
# search
search:
  url:      /search
  param:    { module: search, action: index }


#callback
callback:
  url:   /callback
  param: { module: callback, action: index }
#  url:      /payment/callback
#  param:    { module: payment, action: callback }

#callback send
callback_send:
  url:   /callback/send
  param: { module: callback, action: send }
#  url:      /payment/callback
#  param:    { module: payment, action: callback }

#
# tag
tag:
  url:      /tags/
  param:    { module: tag, action: index }
#
# tag show
tag_show:
  url:      /tags/:tag
  param:    { module: tag, action: show }


#
# test core module
core_test:
  url:      /core/:action
  param:    { module: core }

default_show:
  url:   /:page
  param: { module: page, action: index }
