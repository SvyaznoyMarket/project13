# default rules
homepage:
  url:   /
  param: { module: default, action: index }



# товар
#
# каталог товаров
productCatalog:
  url:   /catalog
  param: { module: productCatalog, action: index }
#
# фильтр каталога товаров
productCatalog_filter:
  url:   /catalog/:productCategory/_filter
  param: { module: productCatalog, action: filter }
  class:   myProductCatalogRoute
  options: { model: ProductCategory, type: object, method: getForRoute }
#
# категория каталога товаров
productCatalog_category:
  url:   /catalog/:productCategory/
  param: { module: productCatalog, action: category}
  class:   myProductCatalogRoute
  options: { model: ProductCategory, type: object, method: getForRoute }
#
# категория и производитель каталога товаров
productCatalog_creator:
  url:   /catalog/:productCategory/:creator/
  param: { module: productCatalog, action: creator }
  class:   myProductCatalogRoute
  options: { model: ProductCategory, type: object, method: getForRoute }
#
# карточка товара
productCard:
  url:   /products/:product
  param: { module: productCard, action: index }
  class:   myDoctrineRoute
  options: { model: Product, type: object, method: getForRoute }
#
# комментарии товара
productComment:
  url:   /products/:product/comments
  param: { module: productComment, action: index }
  class:   myDoctrineRoute
  options: { model: Product, type: object, method: getForRoute }
#
# новый комментарий товара
productComment_new:
  url:   /products/:product/comments/new
  param: { module: productComment, action: new }
  class:   myDoctrineRoute
  options: { model: Product, type: object, method: getForRoute }
#
# создать комментарий товара
productComment_create:
  url:   /products/:product/comments/create
  param: { module: productComment, action: create }
  class:   myDoctrineRoute
  options: { model: Product, type: object, method: getForRoute }
  requirements:
    sf_method: [ post ]
#
# аналогичные товары
similarProduct:
  url:   /products/:product/similar
  param: { module: similarProduct, action: index }
  class:   myDoctrineRoute
  options: { model: Product, type: object, method: getForRoute }
#
# обновление товара по измененной характеристики для группы товаров
changeProduct:
  url:   /products/:product/change/:property/:value
  param: { module: product, action: changeProduct }
  class: myDoctrineRoute
  options: { model: Product, type: object, method: getForRoute }


# Новость
#
# news category
newsCategory:
  url:   /news/
  param: { module: newsCategory, action: index }
#
# news category show
newsCategory_show:
  url:   /news/:newsCategory/
  param: { module: newsCategory, action: show }
  class:   myNewsRoute
  options: { model: NewsCategory, type: object, method: getForRoute }
#
# news list by year
newsCategory_year:
  url:   /news/:newsCategory/:year
  param: { module: newsCategory, action: year }
  class:   myNewsRoute
  options: { model: NewsCategory, type: object, method: getForRoute }
#
# news list by month
newsCategory_month:
  url:   /news/:newsCategory/:year/:month
  param: { module: newsCategory, action: month }
  class:   myNewsRoute
  options: { model: NewsCategory, type: object, method: getForRoute }
#
# news
news_show:
  url:   /news/:newsCategory/:year/:month/:news
  param: { module: news, action: show }
  class:   myNewsRoute
  options: { model: News, type: object, method: getForRoute }



# Пользователь
#
# user
user:
  url:   /private/
  param: { module: user, action: index }
#
# user signin
user_signin:
  url:   /login
  param: { module: guardUser, action: signin }
#
# user signout
user_signout:
  url:   /logout
  param: { module: guardUser, action: signout }
#
# user forgot password
user_forgotPassword:
  url:   /request-password
  param: { module: guardUser, action: forgotPassword }
#
# user change password
user_changePassword:
  url:   /private/password
  param: { module: guardUser, action: changePassword }

#
# user product history
userProductHistory:
  url:   /private/product-history
  param: { module: userProductHistory, action: index }
#
# user product history clear
userProductHistory_clear:
  url:   /private/product-history/clear
  param: { module: userProductHistory, action: clear }

#
# user delayed product
userDelayedProduct:
  url:   /private/delayed-products
  param: { module: userDelayedProduct, action: index }
#
# user delayed product create
userDelayedProduct_create:
  url:   /private/delayed-products/create/:product
  param: { module: userDelayedProduct, action: create }
  class:   myDoctrineRoute
  options: { model: Product, type: object, method: getForRoute }
#
# user delayed product delete
userDelayedProduct_delete:
  url:   /private/delayed-products/delete/:product
  param: { module: userDelayedProduct, action: delete }
  class:   myDoctrineRoute
  options: { model: Product, type: object, method: getForRoute }
#
# user delayed product clear
userDelayedProduct_clear:
  url:   /private/delayed-products/clear
  param: { module: userDelayedProduct, action: clear }


#
# user product notice
userProductNotice:
  url:   /private/product-notices
  param: { module: userProductNotice, action: index }
#
# user product notice show
userProductNotice_show:
  url:   /private/product-notices/show/:product
  param: { module: userProductNotice, action: show }
  class:   myDoctrineRoute
  options: { model: Product, type: object, method: getForRoute }
#
# user product notice create
userProductNotice_create:
  url:   /private/product-notices/create/:product
  param: { module: userProductNotice, action: create }
  class:   myDoctrineRoute
  options: { model: Product, type: object, method: getForRoute }
  requirements:
    sf_method: [ post ]
#
# user product notice delete
userProductNotice_delete:
  url:   /private/product-notices/delete/:product
  param: { module: userProductNotice, action: delete }
  class:   myDoctrineRoute
  options: { model: Product, type: object, method: getForRoute }
#
# user product notice clear
userProductNotice_clear:
  url:   /private/product-notices/clear
  param: { module: userProductNotice, action: clear }
  class:   myDoctrineRoute
  options: { model: Product, type: object, method: getForRoute }

#
# user tag
userTag:
  url:   /private/tags
  param: { module: userTag, action: index }
#
# user tag create
userTag_create:
  url:     /private/tags/create
  param:   { module: userTag, action: create }
#
# user tag update
userTag_update:
  url:     /private/tags/:userTag/update
  param:   { module: userTag, action: update }
  class:   myDoctrineRoute
  options: { model: UserTag, type: object, method: getForRoute }
# user tag delete
userTag_delete:
  url:     /private/tags/:userTag/delete
  param:   { module: userTag, action: delete }
  class:   myDoctrineRoute
  options: { model: UserTag, type: object, method: getForRoute }
#
# user tag link product
userTag_linkProduct:
  url:     /private/tags/:userTag/link/:product
  param:   { module: userTag, action: linkProduct }
  class:   myDoctrineRoute
  options: { model: UserTag, type: object, method: getForRoute }
#
# user tag unlink product
userTag_unlinkProduct:
  url:     /private/tags/:userTag/unlink/:product
  param:   { module: userTag, action: unlinkProduct }
  class:   myDoctrineRoute
  options: { model: UserTag, type: object, method: getForRoute }
#



#
# product helper
productHelper:
  url:   /helper
  param: { module: productHelper, action: index }
#
# product helper show
productHelper_show:
  url:   /helper/:productHelper
  param: { module: productHelper, action: show }
  class:   myDoctrineRoute
  options: { model: ProductHelper, type: object, method: getForRoute }
#
# product helper answer
productHelper_answer:
  url:     /helper/:productHelper/answer
  param:   { module: productHelper, action: answer }
  class:   myDoctrineRoute
  options: { model: ProductHelper, type: object, method: getForRoute }
  requirements:
    sf_method: [ post ]
#
# product helper result
productHelper_result:
  url:     /helper/:productHelper/result
  param:   { module: productHelper, action: result }
  class:   myDoctrineRoute
  options: { model: ProductHelper, type: object, method: getForRoute }
  requirements:
    sf_method: [ post ]



#
# user product compare
userProductCompare:
  url:   /compare
  param: { module: userProductCompare, action: index }
#
# user product compare show
userProductCompare_show:
  url:   /compare/show/:productCategory
  param: { module: userProductCompare, action: show }
  class:   myDoctrineRoute
  options: { model: ProductCategory, type: object, method: getForRoute }
#
# user product compare add
userProductCompare_add:
  url:   /compare/add/:product
  param: { module: userProductCompare, action: add }
  class:   myDoctrineRoute
  options: { model: Product, type: object, method: getForRoute }
#
# user product compare delete
userProductCompare_delete:
  url:   /compare/delete/:product
  param: { module: userProductCompare, action: delete }
  class:   myDoctrineRoute
  options: { model: Product, type: object, method: getForRoute }



#
# user product rating create
userProductRating_create:
  url:   /product-rating/create/:product
  param: { module: userProductRating, action: create }
  class:   myDoctrineRoute
  options: { model: Product, type: object, method: getForRoute }
  requirements:
    sf_method: [ post ]


#
# user address
userAddress:
  url:   /private/address
  param: { module: userAddress, action: index }
#
# user address create
userAddress_create:
  url:   /private/address/create
  param: { module: userAddress, action: create }
#
# user address update
userAddress_update:
  url:   /private/address/update/:userAddress
  param: { module: userAddress, action: update }
  class:   myDoctrineRoute
  options: { model: UserAddress, type: object, method: getForRoute }
  requirements:
    sf_method: [ post ]
#
# user address edit
userAddress_edit:
  url:   /private/address/edit/:userAddress
  param: { module: userAddress, action: edit }
  class:   myDoctrineRoute
  options: { model: UserAddress, type: object, method: getForRoute }
#
# user address delete
userAddress_delete:
  url:   /private/address/delete/:userAddress
  param: { module: userAddress, action: delete }
  class:   myDoctrineRoute
  options: { model: UserAddress, type: object, method: getForRoute }


# Корзина товаров
#
# cart
cart:
  url:   /cart
  param: { module: cart, action: index }
#
# cart add
cart_add:
  url:   /cart/add/:product/:quantity
  param: { module: cart, action: add }
#
# cart delete
cart_delete:
  url:   /cart/delete/:product
  param: { module: cart, action: delete }
#
# cart clear
cart_clear:
  url:   /cart/clear
  param: { module: cart, action: clear }



default_show:
  url:   /:page
  param: { module: default, action: show }

default:
  url:   /:module/:action/*
