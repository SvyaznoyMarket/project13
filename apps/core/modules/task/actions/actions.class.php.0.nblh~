<?php

require_once dirname(__FILE__).'/../lib/taskGeneratorConfiguration.class.php';
require_once dirname(__FILE__).'/../lib/taskGeneratorHelper.class.php';

/**
 * task actions.
 *
 * @package    enter
 * @subpackage task
 * @author     Связной Маркет
 * @version    SVN: $Id: actions.class.php 23810 2009-11-12 11:07:44Z Kris.Wallsmith $
 */
class taskActions extends autoTaskActions
{
 /**
  * Executes clear action
  *
  * @param sfRequest $request A request object
  */
  public function executeClear(sfWebRequest $request)
  {
    $taskList = TaskTable::getInstance()->getOldList(7);

    if ($taskList->delete())
    {
      $this->getUser()->setFlash('notice', 'Старые задачи успешно очищены');
    }
    else {
      $this->getUser()->setFlash('error', 'Не удалось очистить старые задачи');
    }


    $this->redirect('task');
  }
 /**
  * Executes init action
  *
  * @param sfRequest $request A request object
  */
  public function executeInit(sfWebRequest $request)
  {
    $response = $this->getCore()->query('load.start');
    //myDebug::dump($response, 1);
    if ($response['confirmed'])
    {
      $task = new Task();
      $task->fromArray(array(
        'type'    => 'project.init',
        'core_id' => $response['id'],
      ));
      $task->setContentData(array_merge($response, array(
        'status'    => 'run',
        'prepared'  => array(), // массив моделей, таблицы которых подготовлены к загрузке данных
        'made'      => array(), // массив моделей, которые уже сформированы полностью и в них нужно делать только update записей (для ProductCategory)
      )));

      $task->save();

      $this->getUser()->setFlash('notice', 'Задача успешно запущена');
    }
    else {
      $this->getUser()->setFlash('error', "Не удалось запустить задачу. Ответ от core:\n".sfYaml::dump($response));
    }


    $this->redirect('task');
  }
 /**
  * Executes core action
  *
  * @param sfRequest $request A request object
  */
  public function executeCore(sfWebRequest $request)
  {
    $this->task = $this->getRoute()->getObject();

    $response = false;
    $query = false;
    if ('project.sync' == $this->task->type)
    {
      $query = array(
        'name'  => 'sync.get',
        'param' => array(
          'id' => $this->task->getContentData('packet_id'),
        ),
      );
    }

    if ($query)
    {
      $response = $this->getCore()->query($query['name'], $query['param']);
    }

    $this->setVar('response', is_array($response) ? sfYaml::dump($response, 6) : $response, true);
    $this->setVar('query', is_array($query) ? sfYaml::dump($query) : $query, true);
  }



  protected function getCore()
  {
    return Core::getInstance();
  }
}
