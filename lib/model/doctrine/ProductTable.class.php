<?php

/**
 * ProductTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ProductTable extends myDoctrineTable
{
 /**
  * Returns an instance of this class.
  *
  * @return object ProductTable
  */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('Product');
  }

  public function getQueryRootAlias()
  {
    return 'product';
  }

  public function getCoreMapping()
  {
    return array(
      'id'              => 'core_id',
      'name'            => 'name',
      'bar_code'        => 'barcode',
      'article'         => 'article',
      'announce'        => 'preview',
      'tagline'         => 'tagline',
      'description'     => 'description',
      'rating'          => 'rating',
      'rating_count'    => 'rating_quantity',
      'score'           => 'score',
      'media_image'     => 'main_photo',
      'prefix'          => 'prefix',
      'is_primary_line' => 'is_lines_main',
      'is_model'        => 'is_model',
      'set_id'          => 'set_id',

      'type_id'         => array('rel' => 'Type'),
      'brand_id'        => array('rel' => 'Creator'),
      'category'        => array('rel' => 'Category'),
      'tag'             => array('rel' => 'Tag'),
      'line_id'         => array('rel' => 'Line'),
      'model_id'        => array('rel' => 'Model'),
      //'property_model'  => array('rel' => 'ModelProperty'),
    );
  }

  public function getDefaultParameters()
  {
    return array(
      'view'           => false, // list, show
      'group_property' => false, // группировать свойства товара по группам
      'with_line'      => false,
      'with_model'     => false, // список только товаров, без моделей
      'hydrate_array'  => false,
      'with_creator'   => false,
      'with_price'     => false,
      'with_category'  => false,
      'with_delivery_price' => false,
        
    );
  }

  public function createBaseQuery(array $params = array())
  {
    $this->applyDefaultParameters($params);

    $q = $this->createQuery('product');

    if ('list' == $params['view'])
    {
      $q->addWhere('product.view_list = ?', true);
    }
    if ('show' == $params['view'])
    {
      $q->addWhere('product.view_show = ?', true);
    }
    elseif (!isset($param['old_goods']) || false == $param['old_goods'])
    {
      //$q->addWhere('product.is_instock = ?', true);
    }

    if ($params['with_line'])
    {
      $q->innerJoin('product.Line line');
    }
    
    if ($params['with_creator'])
    {
      $q->leftJoin('product.Creator creator');
    }
    if ($params['with_delivery_price'])
    {
      $q->leftJoin('product.DeliveryPrice delivery_price');
    }
    if ($params['with_price'])
    {
      $q->innerJoin('product.ProductPrice price');
    }
    if ($params['with_category'])
    {
      $q->leftJoin('product.ProductCategoryProductRelation category');
    } 

    
    
    if (false == $params['with_model'] && 'show' != $params['view'])
    {
      $q->addWhere('product.model_id IS NULL OR product.is_model = ?', 1);
    }

    $q->orderBy('product.is_instock DESC, product.score DESC');

    return $q;
  }

  public function getRecordById($id, array $params = array())
  {
    $this->applyDefaultParameters($params, array(
      'with_properties' => false,
      'property_view'   => false,
      'with_line'       => false,
      'with_model'      => false,
    ));

    $q = $this->createBaseQuery($params);

    $q->leftJoin('product.Category productCategory')
      ->leftJoin('product.Creator creator')
      ->leftJoin('product.Photo photo')
    ;
    if ($params['with_properties'])
    {
      $q->leftJoin('product.PropertyRelation productPropertyRelation');
    }

    $q->leftJoin('product.ProductPrice productPrice')
      ->innerJoin('productPrice.PriceList priceList')
      ->innerJoin('priceList.Region region WITH region.id = ?', sfContext::getInstance()->getUser()->getRegion('id'));

    $this->setQueryParameters($q, $params);
    $q->addWhere('product.id = ?', $id);

    //$q->useResultCache(true, null, $this->getRecordQueryHash($id, $params));
    if ($params['hydrate_array'])
    {
      $q->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);
    }
    $record = $q->fetchOne();
    if (!$record)
    {
      return $record;
    }
    if (empty($record['ProductPrice']))
    {
      $prices = ProductPriceTable::getInstance()->getDefaultByProductId($record['id']);
    //$prices = ProductPriceTable::getInstance()->getByProductId($record['id']);
      if ($prices)
      {
        if ($record instanceof Product)
        {
          $record->mapValue('defaultProductPrice', $prices);
        }
        else {
          $record['defaultProductPrice'] = $prices;
        }
        //$record['price'] = $prices->price;
      }
    }

    $record['Type'] = ProductTypeTable::getInstance()->getById($record['type_id'], array(
      'view'           =>
        $params['with_properties']
        ? ($params['property_view'] ? $params['property_view'] : $params['view'])
        : false
      ,
      'group_property' => $params['group_property'],
      'hydrate_array'  => $params['hydrate_array'],
    ));

    if ($params['with_properties'])
    {
      $productPropertyRelationTable = ProductPropertyRelationTable::getInstance();

      // группировка параметров продукта по свойствам продукта
      $productPropertyRelationArray = array();
      foreach ($record['PropertyRelation'] as $propertyRelation)
      {
        // temporary fix
        //$realValue = $propertyRelation['real_value'];
        $realValue = $productPropertyRelationTable->getRealValue($propertyRelation);
        if (false
          || ('' === $realValue)
          || (null === $realValue)
          || (0 === $realValue)
          || (0.0000 === $realValue)
          || ('0.0000' === $realValue)
          || ('0' === $realValue)
        ) continue;

        if (!isset($productPropertyRelationArray[$propertyRelation['property_id']]))
        {
          $productPropertyRelationArray[$propertyRelation['property_id']] = array();
        }
        $productPropertyRelationArray[$propertyRelation['property_id']][] = $propertyRelation;
      }

      // тип товара
      foreach ($record['Type']['PropertyRelation'] as $propertyRelation)
      {
        if (!isset($productPropertyRelationArray[$propertyRelation['property_id']])/* && null !== $productPropertyRelationArray[$propertyRelation['property_id']]*/) continue;

        $record['Parameter'][] = new ProductParameter($propertyRelation, $productPropertyRelationArray[$propertyRelation['property_id']]);
      }

      $parameterGroup = array();
      // группировка параметров товара по группам
      if ($params['group_property'])
      {
        foreach ($record['Type']['PropertyGroupRelation'] as $propertyGroupRelation)
        {
          $propertyGroup = $propertyGroupRelation['PropertyGroup'];
          $productParameterArray = array();
          foreach ($record['Parameter'] as $productParameter)
          {
            if ($productParameter->getGroupId() == $propertyGroup['id'])
            {
              $productParameterArray[] = $productParameter;
            }
          }
          //myDebug::dump($propertyGroup);
          $parameterGroup[$propertyGroupRelation['position']] = new ProductParameterGroup($propertyGroup, $productParameterArray);
          //$record['ParameterGroup'][$propertyGroup['ProductTypePropertyGroupRelation'][0]->position] = new ProductParameterGroup($propertyGroup, $productParameterArray);
        }

        ksort($parameterGroup);
        foreach ($parameterGroup as $productParameterGroup)
        {
          $record['ParameterGroup'][] = $productParameterGroup;
        }
      }
    }

    return $record;
  }

  public function getForRoute(array $params)
  {
    $id = isset($params['product']) ? $this->getIdByToken($params['product']) : null;

    return $this->getById($id, array(
      'group_property'  => true,
      'view'            => 'show',
      'property_view'   => 'show',
      'with_properties' => true,
    ));
  }

  public function getIdByToken($token)
  {
    $q = $this->createQuery()
      ->select('id')
    ;

    if (false !== strpos($token, '/'))
    {
      list($tokenPrefix, $token) = explode('/', $token);
      $q->where('token_prefix = ? AND token = ?', array($tokenPrefix, $token));
    }
    else {
      $q->where('token = ?', $token);
    }

    $q->setHydrationMode(Doctrine_Core::HYDRATE_SINGLE_SCALAR);

    return $q->fetchOne();
  }

  public function getByToken($token, array $params = array())
  {
    $id = $this->getIdByToken($token);

    return $this->getById($id, $params);
  }

  public function getByBarcode($barcode, array $params = array())
  {
    $id = $this->getIdBy('barcode', $barcode);

    return $this->getById($id, $params);
  }

  public function getListByCategory(ProductCategory $category, array $params = array())
  {
    $this->applyDefaultParameters($params, array(
      'creator'  => false,
      'only_ids' => false,
    ));

    $q = $this->createBaseQuery($params);

    $this->setQueryForFilter($q, array(
      'category' => $category,
      'creator'  => $params['creator'],
    ));

    $this->setQueryParameters($q, $params);

    //$ids = $this->getIdsByQuery($q, $params, 'productCategory-'.$category->id.'/product-ids');
    $ids = $this->getIdsByQuery($q, $params);
    if ($params['only_ids'])
    {
      return $ids;
    }

    return $this->createListByIds($ids, $params);
  }

  public function getQueryByFilter(array $filter, array $params = array())
  {
    $q = $this->createBaseQuery($params);

    $this->setQueryForFilter($q, $filter, $params);

    $this->setQueryParameters($q, $params);

    return $q;
  }

  public function setQueryForFilter(myDoctrineQuery $q, array $filter, array $params = array())
  {
    $filter = myToolkit::arrayDeepMerge(array(
      'category'   => false,
      'creator'    => false,
      'parameters' => array(),
      'price'      => array('from' => null, 'to' => null),
      'tag'        => false,
      'type'       => false,
    ), $filter);

    // категория
    if ($filter['category'])
    {
      if ($filter['category'] instanceof ProductCategory)
      {
        if ($filter['category']->has_line)
        {
          $q->innerJoin('product.Line line')
            ->innerJoin('line.Product line_product')
            ->innerJoin('line_product.Category category WITH category.id = ?', $filter['category']->id)
            ->addWhere('product.is_lines_main = ?', 1)
          ;
        }
        else
        {
          $ids = $filter['category']->getDescendantIds();
          $ids[] = $filter['category']->id;
        }
      }
      else if (!is_array($filter['category']))
      {
        $ids = array($filter['category']);
      }

      if (isset($ids) && count($ids) > 0)
      {
        $q->innerJoin('product.Category category');
        //$q->addWhere('category.id = ?', ($filter['category'] instanceof ProductCategory) ? $filter['category']->id : $filter['category']);
        $q->whereIn('category.id', $ids);
      }
    }

    // производитель
    if ($filter['creator'])
    {
      if (is_array($filter['creator']))
      {
        $q->whereIn('product.creator_id', $filter['creator']);
      }
      else {
        $q->addWhere('product.creator_id = ?', ($filter['creator'] instanceof Creator) ? $filter['creator']->id : $filter['creator']);
      }
    }

    // цена
    if ($filter['price']['from'])
    {
      $q->innerJoin('product.ProductPrice productPrice');
      $q->innerJoin('productPrice.PriceList priceList with priceList.is_default = ?', 1);
      $q->addWhere('productPrice.price >= ?', $filter['price']['from']);
    }
    if ($filter['price']['to'])
    {
      if (!$q->hasAliasDeclaration('productPrice'))
      {
        $q->innerJoin('product.ProductPrice productPrice');
        $q->innerJoin('productPrice.PriceList priceList with priceList.is_default = ?', 1);
      }
      $q->addWhere('productPrice.price <= ?', $filter['price']['to']);
    }

    // параметры
    if (count($filter['parameters']) > 0)
    {
      /*
      if (!$q->hasAliasDeclaration('productPropertyRelation'))
      {
        $q->leftJoin('product.PropertyRelation productPropertyRelation');
      }
      */
      foreach ($filter['parameters'] as $parameter)
      {
        $q->leftJoin('product.PropertyRelation productPropertyRelation'.$parameter['filter']->id.' WITH productPropertyRelation'.$parameter['filter']->id.'.property_id = '.$parameter['filter']->property_id);
        if (('choice' == $parameter['filter']->type) && (count($parameter['values']) > 0))
        {
          /*$q->addWhere(
            'productPropertyRelation.property_id = ? AND productPropertyRelation.option_id IN ('.implode(',', array_fill(0, count($parameter['values']), '?')).')',
            array_merge(array($parameter['filter']->property_id), !is_array($parameter['values']) ? array($parameter['values']) : $parameter['values'])
          );*/
          //$q->innerJoin('product.TagRelation tagRelation'.$parameter['tag_group']);
          $q->andWhereIn('productPropertyRelation'.$parameter['filter']->id.'.option_id', $parameter['values']);
        }
        else if (('range' == $parameter['filter']->type) && (count($parameter['values']) > 0))
        {
          /*
          if (!empty($parameter['values']['from']) && !empty($parameter['values']['to']))
          {
            $q->addWhere('productPropertyRelation.value_float BETWEEN ? AND ?', array($parameter['values']['from'], $parameter['values']['to']));
          }
          */
          if (!empty($parameter['values']['from']))
          {
            $q->addWhere('productPropertyRelation'.$parameter['filter']->id.'.value_float >= ?', array($parameter['values']['from']));
          }
          if (!empty($parameter['values']['to']))
          {
            $q->addWhere('productPropertyRelation'.$parameter['filter']->id.'.value_float <= ?', array($parameter['values']['to']));
          }
        }
        else if (('checkbox' == $parameter['filter']->type) && (null !== $parameter['values']) && (1 == count($parameter['values'])))
        {
          $q->addWhere('productPropertyRelation'.$parameter['filter']->id.'.value_boolean = ?', array($parameter['values'][0]));
        }
      }
    }

    // теги
    if ($filter['tag'])
    {
      if (!$q->hasAliasDeclaration('tagRelation'))
      {
        $q->innerJoin('product.TagRelation tagRelation');
      }

      if (is_array($filter['tag']))
      {
        $q->andWhereIn('tagRelation.tag_id', $filter['tag']);
      }
      else {
        $q->addWhere('tagRelation.tag_id = ?', ($filter['tag'] instanceof Tag) ? $filter['tag']->id : $filter['tag']);
      }
    }

    // типы
    if ($filter['type'])
    {
      if (is_array($filter['type']))
      {
        $q->andWhereIn('product.type_id', $filter['type']);
      }
      else {
        $q->addWhere('product.type_id = ?', ($filter['type'] instanceof ProductType) ? $filter['type']->id : $filter['type']);
      }
    }
  }

  // TODO: удалить
  public function setQueryForTagFilter(myDoctrineQuery $q, array $filter, array $params = array())
  {
    $filter = myToolkit::arrayDeepMerge(array(
      'category'   => false,
      'creator'    => false,
      'parameters' => array(),
      'price'      => array('from' => null, 'to' => null),
    ), $filter);

    // категория
    if ($filter['category'])
    {
      if ($filter['category'] instanceof ProductCategory)
      {
        $ids = $filter['category']->getDescendantIds();
        $ids[] = $filter['category']->id;
      }
      else if (!is_array($filter['category']))
      {
        $ids = array($filter['category']);
      }

      if (count($ids) > 0)
      {
        $q->innerJoin('product.Category category');
        //$q->addWhere('category.id = ?', ($filter['category'] instanceof ProductCategory) ? $filter['category']->id : $filter['category']);
        $q->whereIn('category.id', $ids);
      }
    }

    // производитель
    if ($filter['creator'])
    {
      if (is_array($filter['creator']))
      {
        $q->whereIn('product.creator_id', $filter['creator']);
      }
      else {
        $q->addWhere('product.creator_id = ?', ($filter['creator'] instanceof Creator) ? $filter['creator']->id : $filter['creator']);
      }
    }

    // цена
    if ($filter['price']['from'])
    {
      $q->innerJoin('product.ProductPrice productPrice');
      $q->innerJoin('productPrice.PriceList priceList with priceList.is_default = ?', 1);
      $q->addWhere('productPrice.price >= ?', $filter['price']['from']);
    }
    if ($filter['price']['to'])
    {
      if (!$q->hasAliasDeclaration('productPrice'))
      {
        $q->innerJoin('product.ProductPrice productPrice');
        $q->innerJoin('productPrice.PriceList priceList with priceList.is_default = ?', 1);
      }
      $q->addWhere('productPrice.price <= ?', $filter['price']['to']);
    }

    // параметры
    if (count($filter['parameters']) > 0)
    {
      foreach ($filter['parameters'] as $parameter)
      {
        if (count($parameter['values']) > 0)
        {
          $q->innerJoin('product.TagRelation tagRelation'.$parameter['tag_group']);
          $q->andWhereIn(
            'tagRelation'.$parameter['tag_group'].'.tag_id', $parameter['values']
          );
        }
      }
    }
  }

  public function getListByTokens(array $tokens, array $params = array())
  {
    $list = $this->createList();

    foreach ($tokens as $token)
    {
      $list[] = $this->getByToken($token);
    }

    return $list;
  }

  public function getListByBarcodes(array $barcodes, array $params = array())
  {
    $list = $this->createList();

    foreach ($barcodes as $barcode)
    {
      $list[] = $this->getByBarcode($barcode, $params);
    }

    return $list;
  }

  public function getMinPriceByCategory(ProductCategory $category, array $params = array())
  {
    $this->applyDefaultParameters($params);

    $q = $this->createBaseQuery($params);

    $q->select('MIN(productPrice.price) as price_min')
      ->innerJoin('product.CategoryRelation productCategoryProductRelation')
      ->innerJoin('product.ProductPrice productPrice')
      ->innerJoin('productPrice.PriceList priceList WITH priceList.is_default = ?', true)
      ->addWhere('productPrice.price > ?', 0)
      ->andWhereIn('productCategoryProductRelation.product_category_id', $category->getDescendantIds(array('with_parent' => true)))
      ->setHydrationMode(Doctrine_Core::HYDRATE_SINGLE_SCALAR)
    ;

    return $q->fetchOne();
  }

  public function getMaxPriceByCategory(ProductCategory $category, array $params = array())
  {
    $this->applyDefaultParameters($params);

    $q = $this->createBaseQuery($params);

    $q->select('MAX(productPrice.price) as price_min')
      ->innerJoin('product.CategoryRelation productCategoryProductRelation')
      ->innerJoin('product.ProductPrice productPrice')
      ->innerJoin('productPrice.PriceList priceList WITH priceList.is_default = ?', true)
      ->addWhere('productPrice.price > ?', 0)
      ->andWhereIn('productCategoryProductRelation.product_category_id', $category->getDescendantIds(array('with_parent' => true)))
      ->setHydrationMode(Doctrine_Core::HYDRATE_SINGLE_SCALAR)
    ;

    return $q->fetchOne();
  }

  public function countByCategory(ProductCategory $category, array $params = array())
  {
    $this->applyDefaultParameters($params, array(
      'view' => 'list',
    ));

    $q = $this->createBaseQuery($params);

    if ($category->has_line)
    {
        $q->innerJoin('product.Line line')
          ->innerJoin('line.Product line_product')
          ->innerJoin('line_product.Category category WITH category.id = ?', $category->id)
          ->addWhere('product.is_lines_main = ?', 1)
        ;
      //$q->addWhere('product.line_id IS NOT NULL')
      //  ->addWhere('product.is_lines_main = ?', 1);
        //->groupBy('product.line_id');
    }
    else
    {
      $ids = $category->getDescendantIds();
      $ids[] = $category->id;

      $q->innerJoin('product.Category category')
        ->whereIn('category.id', $ids)
      ;
    }

    $this->setQueryParameters($q, $params);

    $q->useResultCache(true, null, $this->getQueryHash('productCategory-'.$category->id.'/product-count', $params));

    return $q->count();
  }

  public function getByCategory(ProductCategory $category, array $params = array())
  {
    $q = $this->createBaseQuery($params);

    if (!empty($category->product_id))
    {
      $q->where('product.id = ?', $category->product_id);
    }
    else
    {
      $ids = $category->getTable()->getDescendatIds($category, array('with_parent' => true));
      $q->innerJoin('product.Category category')
         ->whereIn('category.id', $ids)
      ;
    }

    $this->setQueryParameters($q, $params);

    return $q->fetchOne();
  }

  public function getByLine(ProductLine $line, array $params = array())
  {
    $this->applyDefaultParameters($params);

    $params = myToolkit::arrayDeepMerge(array(
      'select'   => 'product.id',
    ), $params);

    $q = $this->createBaseQuery($params);

    $q->addWhere('product.line_id = ?', $line->id)
      ->addWhere('product.is_lines_main = ?', 1);

    $this->setQueryParameters($q, $params);

    $product = $q->fetchOne();

    return !empty($product) ? $this->getById($product->id) : false;
  }

  public function getQueryByLine(ProductLine $line, array $params = array())
  {
    $this->applyDefaultParameters($params);

    $q = $this->createBaseQuery($params);

    $q->innerJoin('product.Type type')
      ->addWhere('product.line_id = ?', $line->id);

    if (!isset($params['with_main']) || !$params['with_main'])
    {
      $q->addWhere('product.is_lines_main = ?', 0);
    }
    //$q->orderBy('product.set_id DESC, (type.core_id = 790) DESC, product.score DESC');
    $q->orderBy('FIELD(type.core_id, 775, 779, 796, 785, 792, 795, 780, 782, 788, 787, 781, 793, 746, 777, 742, 1134, 743, 1135, 750, 749, 748, 745, 744, 1145, 776, 789, 783, 791, 131, 1148, 1150, 1147, 790, 1149, 199, 757, 149, 198, 758, 756, 755, 759) DESC, product.set_id DESC');

    $this->setQueryParameters($q, $params);

    return $q;
  }

  public function getQueryByKit(Product $product, array $params = array())
  {
    $this->applyDefaultParameters($params);

    $q = $this->createBaseQuery($params);

    $q->innerJoin('product.KitRelation kitRelation WITH kitRelation.kit_id = ?', $product->id);

    $this->setQueryParameters($q, $params);

    return $q;
  }

  public function getCacheEraserKeys($record, $action = null, array $params = array())
  {
    $return = array();

    $intersection = array();
    if ($record instanceof myDoctrineRecord)
    {
      // for preSave
      $modified = array_keys($record->getModified()); // if postSave, then $modified = array_keys($record->getLastModified());
      // Массив полей, изменения в которых ведут к генерации кеш-ключей
      $intersection = array_intersect($modified, array(
        'is_instock',
        //'name',
        //'barcode',
      ));
    }

    if (
      (('save' == $action) && count($intersection))
      || in_array($action, array('delete', 'show'))
    ) {
      if (isset($params['region']) && is_array($params['region']))
      {
        foreach ($params['region'] as $region)
        {
          $return[] = "product-{$record['core_id']}-{$region}";
        }
      }
      else
      {
        $return[] = "product-{$record['core_id']}".(isset($params['region']) ? ("-".$params['region']) : "");
      }

      /*
      foreach ($record->Category as $productCategory)
      {
        $return[] = "productCategory-{$productCategory->core_id}";
      }
      */
    }

    return $return;
  }

  public function getTokensByIds(array $ids, array $params = array())
  {
    if (!count($ids))
    {
      return false;
    }

    //return $this->createBaseQuery($params)
    return $this->createQuery()
      ->select('token')
      ->whereIn('id', $ids)
      ->setHydrationMode(Doctrine_Core::HYDRATE_SINGLE_SCALAR)
      ->execute()
    ;
  }

  public function getTokenById($id, array $params = array())
  {
    if (empty($id))
    {
      return false;
    }

    //return $this->createBaseQuery($params)
    return $this->createQuery()
      ->select('token')
      ->where('id = ?', $id)
      ->setHydrationMode(Doctrine_Core::HYDRATE_SINGLE_SCALAR)
      ->fetchOne()
    ;
  }

  public function isInsale($product)
  {
    $price = ProductPriceTable::getInstance()->getDefaultByProductId($product['id']);

    return $product['is_instock'] && (!empty($price) && $price->price > 0);
  }

  public function getFormattedPrice($product)
  {
    return number_format($this->getRealPrice($product), 0, ',', ' ');
  }

  public function getMainPhotoUrl($product, $view = 0)
  {
    $urls = sfConfig::get('app_product_photo_url');

    return $product['main_photo'] ? $urls[$view].$product['main_photo'] : null;
  }

  public function getRealPrice($product)
  {

    if ($product instanceof Product)
    {
      if (!empty($product->ProductPrice))
      {
        return $product->ProductPrice->getFirst()->price;
      }
      else
      {
        return $product->defaultProductPrice->price;
      }
    }
    elseif (is_array($product))
    {
      if (!empty($product['ProductPrice']))
      {
        return $product['ProductPrice'][0]['price'];
      }
      else
      {
        return $product['defaultProductPrice']['price'];
      }
    }

    return false;
  }
}