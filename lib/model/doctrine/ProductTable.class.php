<?php

/**
 * ProductTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ProductTable extends myDoctrineTable
{
 /**
  * Returns an instance of this class.
  *
  * @return object ProductTable
  */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('Product');
  }

  public function getDefaultParameters()
  {
    return array(
      'view'           => false, // list, show
      'group_property' => false, // группировать свойства товара по группам
    );
  }

  public function createBaseQuery(array $params = array())
  {
    $this->applyDefaultParameters($params);
    
    $q = $this->createQuery('product');
    
    if ('list' == $params['view'])
    {
      $q->addWhere('product.view_list = ?', true);
    }
    if ('show' == $params['view'])
    {
      $q->addWhere('product.view_show = ?', true);
    }
    
    return $q;
  }

  public function getById($id, array $params = array())
  {
    $this->applyDefaultParameters($params);

    $q = $this->createBaseQuery($params);

    $q->leftJoin('product.Category productCategory')
      ->leftJoin('product.Creator creator')
      ->leftJoin('product.PropertyRelation productPropertyRelation')
    ;
    
    $this->setQueryParameters($q);
    
    $q->addWhere('product.id = ?', $id);
    
    $q->useResultCache(true, null, $this->getRecordHash($id, $params));
    //$q->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);
    
    $record = $q->fetchOne();
    if (!$record)
    {
      return $record;
    }
    
    $record['Type'] = ProductTypeTable::getInstance()->getById($record['type_id'], array(
      'view'           => $params['view'],
      'group_property' => $params['group_property'],
    ));
    
    // группировка параметров продукта по свойствам продукта
    $productPropertyRelationArray = array();
    foreach ($record['PropertyRelation'] as $propertyRelation)
    {
      if (!isset($productPropertyRelationArray[$propertyRelation['property_id']]))
      {
        $productPropertyRelationArray[$propertyRelation['property_id']] = array();
      }
      $productPropertyRelationArray[$propertyRelation['property_id']][] = $propertyRelation;
    }

    // тип товара
    foreach ($record['Type']['PropertyRelation'] as $propertyRelation)
    {
      //if (!isset($productPropertyRelationArray[$propertyRelation['property_id']]) && null !== $productPropertyRelationArray[$propertyRelation['property_id']]) continue;

      $record['Parameter'][] = new ProductParameter($propertyRelation, $productPropertyRelationArray[$propertyRelation['property_id']]);
    }
    
    // группировка параметров товара по группам
    if ($params['group_property'])
    {
      foreach ($record['Type']['PropertyGroup'] as $propertyGroup)
      {
        $productParameterArray = array();
        foreach ($record['Parameter'] as $productParameter)
        {
          if ($productParameter->getGroupId() == $propertyGroup->id)
          {
            $productParameterArray[] = $productParameter;            
          }
        }
        $record['ParameterGroup'][] = new ProductParameterGroup($propertyGroup, $productParameterArray);
      }
    }
    
    return $record;
  }

  public function getForRoute(array $params)
  {
    $id = $this->getIdBy('name', $params['product']);
    
    if (!$id)
    {
      return null;
    }
    
    return $this->getById($id, array(
      'group_property' => true,
    ));
  }

  public function toParams()
  {
    return array(
      'name' => $this->name,
    );
  }
}