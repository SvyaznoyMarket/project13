<?php

/**
 * ProductTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ProductTable extends myDoctrineTable
{
 /**
  * Returns an instance of this class.
  *
  * @return object ProductTable
  */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('Product');
  }

  public function getDefaultParameters()
  {
    return array(
      'view'           => false, // list, show
      'group_property' => false, // группировать свойства товара по группам
    );
  }

  public function createBaseQuery(array $params = array())
  {
    $this->applyDefaultParameters($params);

    $q = $this->createQuery('product');

    if ('list' == $params['view'])
    {
      $q->addWhere('product.view_list = ?', true);
    }
    if ('show' == $params['view'])
    {
      $q->addWhere('product.view_show = ?', true);
    }

    return $q;
  }

  public function getById($id, array $params = array())
  {
    $this->applyDefaultParameters($params, array(
      'with_properties' => true,
    ));

    $q = $this->createBaseQuery($params);

    $q->leftJoin('product.Category productCategory')
      ->leftJoin('product.Creator creator')
    ;
    if ($params['with_properties'])
    {
      $q->leftJoin('product.PropertyRelation productPropertyRelation');
    }

    $this->setQueryParameters($q);

    $q->addWhere('product.id = ?', $id);

    $q->useResultCache(true, null, $this->getRecordQueryHash($id, $params));
    //$q->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);

    $record = $q->fetchOne();
    if (!$record)
    {
      return $record;
    }

    $record['Type'] = ProductTypeTable::getInstance()->getById($record['type_id'], array(
      'view'           => $params['view'],
      'group_property' => $params['group_property'],
    ));

    if ($params['with_properties'])
    {
      // группировка параметров продукта по свойствам продукта
      $productPropertyRelationArray = array();
      foreach ($record['PropertyRelation'] as $propertyRelation)
      {
        if (!isset($productPropertyRelationArray[$propertyRelation['property_id']]))
        {
          $productPropertyRelationArray[$propertyRelation['property_id']] = array();
        }
        $productPropertyRelationArray[$propertyRelation['property_id']][] = $propertyRelation;
      }

      // тип товара
      foreach ($record['Type']['PropertyRelation'] as $propertyRelation)
      {
        //if (!isset($productPropertyRelationArray[$propertyRelation['property_id']]) && null !== $productPropertyRelationArray[$propertyRelation['property_id']]) continue;

        $record['Parameter'][] = new ProductParameter($propertyRelation, $productPropertyRelationArray[$propertyRelation['property_id']]);
      }

      // группировка параметров товара по группам
      if ($params['group_property'])
      {
        foreach ($record['Type']['PropertyGroup'] as $propertyGroup)
        {
          $productParameterArray = array();
          foreach ($record['Parameter'] as $productParameter)
          {
            if ($productParameter->getGroupId() == $propertyGroup->id)
            {
              $productParameterArray[] = $productParameter;
            }
          }
          $record['ParameterGroup'][] = new ProductParameterGroup($propertyGroup, $productParameterArray);
        }
      }
    }

    return $record;
  }

  public function getForRoute(array $params)
  {
    $id = isset($params['product']) ? $this->getIdBy('token', $params['product']) : null;

    if (!$id)
    {
      return null;
    }

    return $this->getById($id, array(
      'group_property' => true,
      'view'           => 'show',
    ));
  }

  public function getListByCategory(ProductCategory $category, array $params = array())
  {
    $this->applyDefaultParameters($params, array(
      'creator' => false,
    ));

    $q = $this->createBaseQuery($params);

    $this->setQueryForFilter($q, array(
      'category' => $category,
      'creator'  => $params['creator'],
    ));

    $this->setQueryParameters($q, $params);

    $ids = $this->getIdsByQuery($q);

    return $this->createListByIds($ids, $params);
  }

  public function getQueryByFilter(array $filter, array $params = array())
  {
    $q = $this->createBaseQuery($params);

    $this->setQueryForFilter($q, $filter);

    $this->setQueryParameters($q, $params);

    return $q;
  }

  public function setQueryForFilter(myDoctrineQuery $q, array $filter, array $params = array())
  {
    $filter = myToolkit::arrayDeepMerge(array(
      'category'   => false,
      'creator'    => false,
      'parameters' => array(),
      'price'      => array('from' => null, 'to' => null),
    ), $filter);

    // категория
    if ($filter['category'])
    {
      $q->addWhere('product.category_id = ?', ($filter['category'] instanceof ProductCategory) ? $filter['category']->id : $filter['category']);
    }

    // производитель
    if ($filter['creator'])
    {
      if (is_array($filter['creator']))
      {
        $q->whereIn('product.creator_id', $filter['creator']);
      }
      else {
        $q->addWhere('product.creator_id = ?', ($filter['creator'] instanceof Creator) ? $filter['creator']->id : $filter['creator']);
      }
    }

    // цена
    if ($filter['price']['from'])
    {
      $q->addWhere('product.price >= ?', $filter['price']['from']);
    }
    if ($filter['price']['to'])
    {
      $q->addWhere('product.price <= ?', $filter['price']['to']);
    }

    // параметры
    if (count($filter['parameters']) > 0)
    {
      if (!$q->hasAliasDeclaration('productPropertyRelation'))
      {
        $q->leftJoin('product.PropertyRelation productPropertyRelation');
      }

      foreach ($filter['parameters'] as $parameter)
      {
        if (('choice' == $parameter['filter']->type) && (count($parameter['values']) > 0))
        {
          $q->addWhere(
            'productPropertyRelation.property_id = ? AND productPropertyRelation.option_id IN ('.implode(',', array_fill(0, count($parameter['values']), '?')).')',
            array_merge(array($parameter['filter']->property_id, ), $parameter['values'])
          );
        }
        else if ('range' == $parameter['filter']->type)
        {

        }
      }
    }
  }

  public function getMinPriceByCategory(ProductCategory $category, array $params = array())
  {
    $this->applyDefaultParameters($params);

    $q = $this->createBaseQuery($params);

    $q->select('MIN(product.price) as price_min')
      ->addWhere('product.category_id = ?', $category->id)
      ->setHydrationMode(Doctrine_Core::HYDRATE_SINGLE_SCALAR)
    ;

    return $q->fetchOne();
  }

  public function getMaxPriceByCategory(ProductCategory $category, array $params = array())
  {
    $this->applyDefaultParameters($params);

    $q = $this->createBaseQuery($params);

    $q->select('MAX(product.price) as price_max')
      ->addWhere('product.category_id = ?', $category->id)
      ->setHydrationMode(Doctrine_Core::HYDRATE_SINGLE_SCALAR)
    ;

    return $q->fetchOne();
  }
}