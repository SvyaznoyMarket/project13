<?php

/**
* Service
*
* This class has been auto-generated by the Doctrine ORM Framework
*
* @package enter
* @subpackage model
* @author Связной Маркет
* @version SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
*/
class Service extends BaseService
{
  CONST MIN_BUY_PRICE = 950;


  public $price;

  public function toParams()
  {
    return array(
      'service' => $this->token,
    );
  }

  public function importFromCore(array $data)
  {
    parent::importFromCore($data);

    $this->token = empty($this->token) ? (uniqid().'-'.myToolkit::urlize($this->name)) : $this->token;

    // теги
    if (!empty($data['category'])) foreach ($data['category'] as $relationData)
    {
      $relation = new ServiceCategoryRelation();
      $relation->fromArray(array(
        'category_id' => ServiceCategoryTable::getInstance()->getIdByCoreId($relationData['id']),
      ));
      $this->CategoryRelation[] = $relation;
    }
  }

  public function getPriceByRegion(Region $region = NULL)
  {
      if (!$region){
          $region = RegionTable::getInstance()->getDefault();
      }
$q = ServicePriceTable::getInstance()->createBaseQuery();
$q->select('price')
->addWhere('service_id = ?', $this->id)
        #->addWhere('region_id = ?', $region->id)
                ;
return $q->fetchOne(array(), Doctrine_Core::HYDRATE_SINGLE_SCALAR);
  }
  public function getFormattedPrice($productId = 0)
  {
    #if (!$this->price) {
    $price = $this->getCurrentPrice($productId);
    #}
    if ($price < 1) return 'бесплатно';
    return number_format($price, 0, ',', ' ');
  }


  public function getCurrentPrice($productId = NULL) {

        $region = sfContext::getInstance()->getUser()->getRegion();
        $priceList = $region['product_price_list_id'];
        #$priceList = ProductPriceListTable::getInstance()->getCurrent();
        #$priceListDefault = ProductPriceListTable::getInstance()->getDefault();

        $currentPrice = 0;
        //если указан подукт, сначала ищем привязанную к продукту цену
        if ($productId) {
            foreach($this->Price as $price) {
                if ($priceList == $price['service_price_list_id'] && $productId == $price['product_id']){
                      $currentPrice = $price['price'];
                      break;
                }
            }
        }
        //если продукт не указан, или привязанную к продукту цену не нашли,
        //ищем цену без привязки к продукту
        if (!$currentPrice) {
            foreach($this->Price as $price) {
                if (  $priceList == $price['service_price_list_id'] && !$price['product_id']){
                      $currentPrice = $price['price'];
                      break;
                }
            }
        }
        #var_dump($currentPrice);
        $this->price = $currentPrice;
        return $currentPrice;
  }

  public function getCatalogParent(){
    $result = ServiceCategoryTable::getInstance()
            ->createQuery('sc')
            ->innerJoin('sc.ServiceRelation as rel on sc.id=rel.category_id')
            ->where('rel.service_id = ? AND sc.level = ?', array($this->id, 2) );
    $result = $result->fetchArray();

    #print_r( $result );
    if (isset($result[0])) {
        return $result[0];
    } else {
        return false;
    }
  }

  public function getPhotoUrl($view = 1)
  {
    $urls = sfConfig::get('app_service_photo_url');

    return $this->getMainPhoto() ? $urls[$view].$this->getMainPhoto() : null;
  }

  public function getMainPhotoUrl($view = 1)
  {
    $urls = sfConfig::get('app_service_photo_url');

    return $this->getMainPhoto() ? $urls[$view].$this->getMainPhoto() : null;
  }

}
