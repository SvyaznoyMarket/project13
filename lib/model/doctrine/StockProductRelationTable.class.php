<?php

/**
 * StockProductRelationTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class StockProductRelationTable extends myDoctrineTable
{
  /**
   * Returns an instance of this class.
   *
   * @return object StockProductRelationTable
   */
  public static function getInstance()
  {
      return Doctrine_Core::getTable('StockProductRelation');
  }

  public function getCoreMapping()
  {
    return array(
      'id'          => 'core_id',
      'quantity'    => 'quantity',
      'is_supplier' => 'is_supplied',

      'product_id' => array('rel' => 'Product'),
      'store_id'   => array('rel' => 'Stock'),
      'shop_id'    => array('rel' => 'Shop'),
    );
  }

  public function getDefaultParameters()
  {
    $region = $this->getParameter('region');

    return array(
      'region' => $region,
    );
  }

  /**
   *
   * @param int $product_id
   * @param int|null|false $shop_id
   * @param int|null|false $store_id
   * @param int $quantity кол-во
   * @param array $params
   * @return bool
   */
  public function isInStock($product_id, $shop_id = null, $store_id = null, $quantity = 1, array $params = array())
  {
    $this->applyDefaultParameters($params);

    $q = $this->createBaseQuery($params);
    $q->andWhere('stockProductRelation.product_id = ?', (int)$product_id);
    if ($shop_id === false) {
      $q->andWhere('stockProductRelation.shop_id IS NULL');
    } elseif ($shop_id !== null) {
      $q->andWhere('stockProductRelation.shop_id = ?', (int)$shop_id);
    }
    if ($store_id === false) {
      $q->andWhere('stockProductRelation.stock_id IS NULL');
    } elseif ($store_id !== null) {
        $q->andWhere('stockProductRelation.stock_id = ?', (int)$store_id);
    }
    $data = $q->fetchArray();
    foreach ($data as $row) {
        if ($row['quantity'] >= $quantity) {
            return true;
        }
    }
    return false;
  }

  public function isSupplied($product_id, array $params = array())
  {
    $this->applyDefaultParameters($params);

    $q = $this->createBaseQuery($params);
    $q->andWhere('stockProductRelation.product_id = ?', (int)$product_id);
    if ($shop_id !== null) {
        $q->andWhere('stockProductRelation.is_supplied = 1');
    }
    return $q->count() > 0;
  }

  public function getQuantityByProduct($product, array $params = array())
  {
    $this->applyDefaultParameters($params);

    $q = $this->createBaseQuery($params);

    $q->select('SUM(stockProductRelation.quantity) AS quantity');

    $q->addWhere('stockProductRelation.shop_id IS NULL');
    $q->addWhere('stockProductRelation.product_id = ?', $product['id']);

    if ($params['region'])
    {
      $q->addWhere('stockProductRelation.stock_id = ?', $params['region']['stock_id']);
    }

    $this->setQueryParameters($q, $params);

    $q->setHydrationMode(Doctrine_Core::HYDRATE_SINGLE_SCALAR);

    return $q->fetchOne();
  }

  public function getCacheEraserKeys($record, $action = null)
  {
    $return = array();

    /*
    $q = ProductTable::getInstance()->createQuery('product')
      ->select('product.core_id')
      ->innerJoin('product.StockRelation stockProductRelation')
      ->where('stockProductRelation.id = ?', $record->id)
      ->setHydrationMode(Doctrine_Core::HYDRATE_SINGLE_SCALAR)
    ;
    $ids = $q->execute();
    if (!is_array($ids))
    {
      $ids = array($ids);
    }

    foreach ($ids as $id)
    {
      $return[] = "product-{$id}";
    }
    */

    return $return;
  }

}