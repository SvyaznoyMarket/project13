<?php

/**
 * ServiceTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ServiceTable extends myDoctrineTable
{
  /**
   * Returns an instance of this class.
   *
   * @return object ServiceTable
   */
  public static function getInstance()
  {
      return Doctrine_Core::getTable('Service');
  }

  public function getCoreMapping()
  {
    return array(
      'id'          => 'core_id',
      'name'        => 'name',
      'description' => 'description',
      'work'        => 'work',
//      'expendable'  => 'expendable',
      'media_image'  => 'main_photo',
      'is_active'   => 'is_active',
    );
  }

  /* TODO добавить условие выборки по региону */
  public function getListByProduct(Product $product, array $params = array())
  {
    $this->applyDefaultParameters($params);

    $q = $this->createBaseQuery($params);

    /*
    $q->innerJoin('service.Category category')
      ->innerJoin('category.ProductTypeRelation productTypeRelation')
      ->andWhere('productTypeRelation.product_type_id=?', array($product->type_id))
      ->innerJoin('service.Price price') ;
     *
     */

    $q #->leftJoin('service.CategoryRelation cr')    //к категориям сервисов
      #->innerJoin('cr.Category c')
      ->innerJoin('service.ProductRelation pr')
      ->andWhere('pr.product_id = ?', array($product->id))
      ->innerJoin('service.Price price')
      ->andWhere('price.price >= ?', Service::MIN_BUY_PRICE)
      ->orderBy('service.name ASC');
            ;

    $this->setQueryParameters($q, $params);
    #$a = $q->execute();
    #print_r($a->toArray());
    return $q->execute();
  }

  public function getListByCategory($category_id, array $params = array())
  {
    $this->applyDefaultParameters($params);

    $q = $this->createBaseQuery($params);
    $q->innerJoin('service.CategoryRelation categoryRelation');

    $q->andWhere('categoryRelation.category_id=?', array($category_id,));

    $this->setQueryParameters($q, $params);

    return $q->execute();
  }

  public function getForRoute(array $params)
  {
    $id = isset($params['service']) ? $this->getIdBy('token', $params['service']) : null;

    return $this->getById($id);
  }

  /*
  public function getById($id, array $params = array())
  {


    $q = $this->createBaseQuery($params);

    $q->leftJoin('service.Price price')
      ->leftJoin('service.Category category')
    ;
    $this->setQueryParameters($q);

    $q->addWhere('product.id = ?', $id);

    //$q->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);
    $record = $q->fetchOne();
    if (!$record)
    {
      return $record;
    }

    /*
    $prices = ProductPriceTable::getInstance()->getDefaultByProductId($record['id']);

    if ($prices)
    {
      $record->mapValue('ProductPrice', $prices);
      $record->price = $prices->price;
    }

    $record['Type'] = ProductTypeTable::getInstance()->getById($record['type_id'], array(
      'view'           =>
        $params['with_properties']
        ? ($params['property_view'] ? $params['property_view'] : $params['view'])
        : false
      ,
      'group_property' => $params['group_property'],
    ));



    return $record;
  }  */

}