<?php

/**
 * ProductCategoryTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ProductCategoryTable extends myDoctrineTable
{

  /**
   * Returns an instance of this class.
   *
   * @return object ProductCategoryTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('ProductCategory');
  }

  public function getQueryRootAlias()
  {
    return 'productCategory';
  }

  public function getCoreMapping()
  {
    return array(
      'id'          => 'core_id',
      'parent_id'   => 'core_parent_id',
      'lft'         => 'core_lft',
      'rgt'         => 'core_rgt',
      'name'        => 'name',
      'is_active'   => 'is_active',
      'media_image' => 'photo',
      'has_line'    => 'has_line',
      'position'    => 'position',
    );
  }

  public function getDefaultParameters()
  {
    return array(
      'hydrate_array' => false,
    );
  }

  public function createBaseQuery(array $params = array())
  {
    $this->applyDefaultParameters($params);

    $q = $this->createQuery('productCategory');

    $q->addWhere('productCategory.is_active = ?', 1);

    $q->orderBy('productCategory.root_id, productCategory.lft');

    return $q;
  }

  public function getForRoute(array $params)
  {
    $id = isset($params['productCategory']) ? $this->getIdByToken($params['productCategory']) : null;

    return $this->getById($id, array());
  }

  public function getIdByToken($token)
  {
    $q = $this->createQuery()
      ->select('id')
    ;

    if (false !== strpos($token, '/'))
    {
      list($tokenPrefix, $token) = explode('/', $token);
      $q->where('token_prefix = ? AND token = ?', array($tokenPrefix, $token));
    }
    else {
      $q->where('token = ?', $token);
    }

    $q->setHydrationMode(Doctrine_Core::HYDRATE_SINGLE_SCALAR);

    return $q->fetchOne();
  }

  public function getRecordById($id, array $params = array())
  {
    $this->applyDefaultParameters($params, array(
      'with_filters' => false,
    ));

    $q = $this->createBaseQuery($params);

    if ($params['with_filters'])
    {
      $q->leftJoin('productCategory.FilterGroup productFilterGroup');
      $q->leftJoin('productFilterGroup.Filter productFilter')
        ->addOrderBy('productFilter.position')
      ;

      $q->leftJoin('productFilter.Property productProperty');
    }

    $this->setQueryParameters($q);

    $q->whereId($id);

    if ($params['hydrate_array'])
    {
      $q->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);
    }

    $list = $q->execute();
    /*
    foreach ($list as $i => $record)
    {
      if ($params['with_filters'] && $record['filter_group_id'])
      {
        $record['FilterGroup'] = ProductFilterGroupTable::getInstance()->getById($record['filter_group_id']);
      }

      if (is_array($record))
      {
        $list[$i] = $record;
      }
    }
     */

    return $this->getResult($list, is_scalar($id));
  }

  public function getList(array $params = array())
  {
    $q = $this->createBaseQuery($params);
    $this->setQueryParameters($q, $params);

    $ids = $this->getIdsByQuery($q, $params, 'productCategory-ids', 'productCategory');

    return $this->createListByIds($ids, $params);
  }

  public function getRootList(array $params = array())
  {
    $return = $this->createList();

    $key = $this->getQueryHash('productCategory-rootList', $params);

    $return = $this->getCachedByKey($key);
    if (!$return)
    {
      $q = $this->createBaseQuery($params);
      $this->setQueryParameters($q, $params);

      $q->addWhere('productCategory.level = 0')
        ->orderBy('productCategory.position');

      $ids = $this->getIdsByQuery($q, $params);
      $return = $this->createListByIds($ids, $params);

      if ($this->isCacheEnabled())
      {
        $this->getCache()->set($key, $return, 604800); // обновить кеш через неделю
      }
    }

    return $return;
  }

  public function getRootRecord($category, array $params = array())
  {
	  if (0 == $category['level'])
    {
		  return $category;
	  }

    $key = $this->getQueryHash("productCategory-{$category['id']}/root", $params);

    $return = $this->getCachedByKey($key);
    if (!$return)
    {
      $q = $this->createBaseQuery();

      $q->andWhere('productCategory.root_id = ?', $category['root_id'])
        ->andWhere('productCategory.level = 0')
      ;

      $this->setQueryParameters($q, $params);

      $return = $q->fetchOne();
      if ($this->isCacheEnabled() && $return)
      {
        $this->getCache()->set($key, $return);
        $this->getCache()->addTag("productCategory-{$category['id']}", $key);
        $this->getCache()->addTag("productCategory-{$return['id']}", $key);
      }
    }

    return $return;
  }

  // TODO: удалить
  public function getSubList(array $params = array())
  {
    /*
//	$counts = array();
//	$countsRaw = Doctrine_Manager::connection()->fetchAll('
//		SELECT  `id` , COUNT( * ) as `c`
//		FROM  `product_category`
//		JOIN product_category_product_relation ON product_category.id = product_category_product_relation.product_category_id
//		GROUP BY id
//	');
//	foreach ($countsRaw as $raw) {
//		$counts;
//	}
	$notEmptyCats = array();
	$notEmptyCatsRaw = Doctrine_Manager::connection()->fetchAll('SELECT DISTINCT pc.product_category_id FROM product_category_product_relation pc INNER JOIN product p ON pc.product_id = p.id WHERE p.is_instock = ?', array(1, ));
//	$notEmptyCatsRaw = Doctrine_Manager::connection()->fetchAll('
//		SELECT DISTINCT product_category_id FROM product_category_product_relation
//		JOIN product_category ON product_category.id = product_category_product_relation.product_category_id
//		WHERE product_category.level > 1
//	');
    foreach ($notEmptyCatsRaw as $raw) {
      $notEmptyCats[] = $raw['product_category_id'];
    }

    $q = $this->createBaseQuery($params);
    $this->setQueryParameters($q, $params);


    if (!empty($params['root_id'])) {
      $q->andWhereIn('productCategory.root_id = ?', (int)$params['root_id']);
    }
    $q->andWhere('productCategory.level = 1');
    $q->orWhereIn('productCategory.id', $notEmptyCats);
    $q->orderBy('productCategory.lft');

    return $q->execute();

    $ids = $this->getIdsByQuery($q);

    return $this->createListByIds($ids, $params);*/
    $q = ProductCategoryTable::getInstance()->createBaseQuery();
    $q->addWhere('productCategory.level < 3 and productCategory.level > 0')
            ;
    $data = $q->execute();
    foreach($data as $cat) {
        $idList[] = $cat['id'];
    }

    $res = $this->getNotEmptyCategoryList($idList);
    foreach($data as $k => $cat) {
        if (!in_array($cat['id'], $res)) {
            unset($data[$k]);
        }
    }
    return $data;
  }

  public function getChildList(ProductCategory $category, $params = array())
  {
    $key = $this->getQueryHash("productCategory-{$category['id']}/childList", $params);

    $return = $this->getCachedByKey($key);
    if (!$return)
    {
      $q = $this->createBaseQuery($params);

      $ids = $this->getDescendatIds($category, array('depth' => 1));

      $return = $this->createListByIds($ids, $params);
      if ($this->isCacheEnabled())
      {
        $this->getCache()->set($key, $return);
        foreach ($ids as $id)
        {
          $this->getCache()->addTag("productCategory-{$id}", $key);
        }
      }
    }

    return $return;
  }

  public function getDescendatList(ProductCategory $category = null, $params = array())
  {
    $key = $this->getQueryHash('productCategory'.($category ? ('-'.$category['id']) : '').'/descendatList', $params);

    $return = $this->getCachedByKey($key);
    if (!$return)
    {
      $q = $this->createBaseQuery($params);

      $ids = $this->getDescendatIds($category, $params);

      $return = $this->createListByIds($ids, $params);
      if ($this->isCacheEnabled() && count($ids))
      {
        $this->getCache()->set($key, $return);
        foreach ($ids as $id)
        {
          $this->getCache()->addTag("productCategory-{$id}", $key);
        }
      }
    }

    return $return;
  }

  public function getDescendatIds(ProductCategory $category = null, $params = array())
  {
    $this->applyDefaultParameters($params, array(
      'with_parent' => false,
      'depth'       => null,
      'min_level'   => null,
      'max_level'   => null,
    ));

    $q = $this->createBaseQuery();

    if ($category)
    {
      $q->addWhere('productCategory.lft > ? and productCategory.rgt < ? and productCategory.root_id = ?', array($category->lft, $category->rgt, empty($category->root_id) ? $category->id : $category->root_id, ));
    }

    if ($category && (null != $params['depth']))
    {
      $q->addWhere('productCategory.level <= ?', $category->level + $params['depth']);
    }

    if (null != $params['min_level'])
    {
      $q->addWhere('productCategory.level > ?', $params['min_level'] - 1);
    }

    if (null != $params['max_level'])
    {
      $q->addWhere('productCategory.level < ?', $params['max_level'] + 1);
    }
    $categoryIds = $this->getIdsByQuery($q, $params);
    if ($params['with_parent'])
    {
      $categoryIds[] = $category->id;
    }

    return $categoryIds;
  }

  public function getAncestorList(ProductCategory $category = null, $params = array())
  {
    $key = $this->getQueryHash('productCategory'.($category ? ('-'.$category['id']) : '').'/ancestorList', $params);

    $return = $this->getCachedByKey($key);
    if (!$return)
    {
      $q = $this->createBaseQuery($params);

      $ids = $this->getAncestorIds($category, $params);

      $return = $this->createListByIds($ids, $params);
      if ($this->isCacheEnabled() && count($ids))
      {
        $this->getCache()->set($key, $return);
        foreach ($ids as $id)
        {
          $this->getCache()->addTag("productCategory-{$id}", $key);
        }
      }
    }

    return $return;
  }

  public function getAncestorIds(ProductCategory $category = null, $params = array())
  {
    $this->applyDefaultParameters($params, array(
      'with_child'  => false,
      'depth'       => null,
      'min_level'   => null,
      'max_level'   => null,
    ));

    $q = $this->createBaseQuery();

    if ($category)
    {
      $q->addWhere('productCategory.lft < ? and productCategory.rgt > ? and productCategory.root_id = ?', array($category->lft, $category->rgt, empty($category->root_id) ? $category->id : $category->root_id, ));
    }

    if ($category && (null != $params['depth']))
    {
      $q->addWhere('productCategory.level >= ?', $category->level + $params['depth']);
    }

    if (null != $params['min_level'])
    {
      $q->addWhere('productCategory.level > ?', $params['min_level'] - 1);
    }

    if (null != $params['max_level'])
    {
      $q->addWhere('productCategory.level < ?', $params['max_level'] + 1);
    }
    $categoryIds = $this->getIdsByQuery($q, $params);
    if ($params['with_child'])
    {
      $categoryIds[] = $category->id;
    }

    return $categoryIds;
  }

  public function getTagIds(ProductCategory $category = null, array $params = array())
  {
    if (!$category)
    {
      return false;
    }

    $categoryIds = $this->getDescendatIds($category, array('with_parent' => true));

    $q = TagProductRelationTable::getInstance()->createBaseQuery();
    $q->select('tagProductRelation.tag_id')
      ->innerJoin('tagProductRelation.Product product WITH product.is_instock = ?', 1)
      ->innerJoin('product.CategoryRelation categoryRelation')
      ->andWhereIn('categoryRelation.product_category_id', $categoryIds)
      ->groupBy('tagProductRelation.tag_id')
      ->orderBy('count(tagProductRelation.product_id) DESC')
      ->setHydrationMode(Doctrine_Core::HYDRATE_SINGLE_SCALAR)
    ;

    return $q->execute();
  }

  /**
   * Из полученного списка категорий отбирает не пустые.
   * Тоесть те, которые содержат либо вложенные категории, либо активные продукты
   * @param type $idList
   * @return type
   */
  public function getNotEmptyCategoryList($idList = array()) {

    //ищем тех, у которых есть продукты
    $productCountlist = ProductCategoryProductRelationTable::getInstance()
            ->createQuery('r')
            ->select('product_category_id, COUNT(product_id)' )
            ->leftJoin('r.Product as p on r.product_id=p.id')
            ->addWhere('p.view_list = ?', 1);

    if (count($idList)>0) {
        $productCountlist = $productCountlist
                            ->addWhere('product_category_id IN ('.implode(',', $idList).')');
    }
    $productCountlist = $productCountlist
                    ->groupBy('product_category_id')
                    ->fetchArray()
            ;

    foreach($productCountlist as $a) {
        $notFreeCatList[] = $a['product_category_id'];
    }

    #print_r($idList);
    //ищем тех, у которых есть вложенные категории
    $catCoreId = ProductCategoryTable::getInstance()
            ->createQuery('p')
            ->select('p.core_id, p.id' )
            ->where('is_active = ?', 1);
    if (isset($idList)) {
        $catCoreId = $catCoreId->addWhere('p.id IN ('.implode(',', $idList).')');
    }
    $catCoreId = $catCoreId->fetchArray();
    foreach($catCoreId as $cat) {
        $coreIdList[] = $cat['core_id'];
        $coreIdToId[$cat['core_id']] = $cat['id'];
    }

    #print_r($coreIdToId);
    $productCatlist = ProductCategoryTable::getInstance()
            ->createQuery('c')
            ->select('core_parent_id, COUNT(id)' )
            ->where('is_active = ?', 1)
            ;
    if (count($coreIdList)>0) {
        $productCatlist = $productCatlist
                            ->addWhere('core_parent_id IN ('.implode(',', $coreIdList).')');
    }
    $productCatlist = $productCatlist
                    ->groupBy('core_parent_id')
                    ->fetchArray();
    foreach($productCatlist as $cat) {
        #print_r($cat);
        $notFreeCatList[] = $coreIdToId[$cat['core_parent_id']];

    }

    return $notFreeCatList;
  }
}