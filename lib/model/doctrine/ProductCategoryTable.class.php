<?php

/**
 * ProductCategoryTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ProductCategoryTable extends myDoctrineTable
{

  /**
   * Returns an instance of this class.
   *
   * @return object ProductCategoryTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('ProductCategory');
  }

  public function getCoreMapping()
  {
    return array(
      'id'        => 'core_id',
      'parent_id' => 'core_parent_id',
      'name'      => 'name',
    );
  }

  public function createBaseQuery(array $params = array())
  {
    $this->applyDefaultParameters($params);

    $q = $this->createQuery('productCategory');

    $q->orderBy('productCategory.root_id, productCategory.lft');

    return $q;
  }

  public function getForRoute(array $params)
  {
    $id = isset($params['productCategory']) ? $this->getIdBy('token', $params['productCategory']) : null;

    return $this->getById($id, array());
  }

  public function getById($id, array $params = array())
  {
    $this->applyDefaultParameters($params, array(
      'with_filters' => true,
    ));

    $q = $this->createBaseQuery($params);

    $this->setQueryParameters($q);

    $q->addWhere('productCategory.id = ?', $id);

    $q->useResultCache(true, null, $this->getRecordQueryHash($id, $params));

    $record = $q->fetchOne();
    if (!$record)
    {
      return $record;
    }

    if ($params['with_filters'] && $record['filter_group_id'])
    {
      $record['FilterGroup'] = ProductFilterGroupTable::getInstance()->getById($record['filter_group_id']);
    }

    return $record;
  }

  public function getList(array $params = array())
  {
    $q = $this->createBaseQuery($params);
    $this->setQueryParameters($q, $params);

    $q->useResultCache(true, null, $this->getQueryHash('productCategory-all', $params));

    /*
    $ids = $this->getIdsByQuery($q);

    return $this->createListByIds($ids, $params);
    */

    return $q->execute();
  }

  public function getRootList(array $params = array())
  {
    $q = $this->createBaseQuery($params);
    $this->setQueryParameters($q, $params);

    $q->addWhere('productCategory.level = ?', 0)
      ->orderBy('productCategory.position');

    $q->useResultCache(true, null, $this->getQueryHash('productCategory-root', $params));

    $ids = $this->getIdsByQuery($q);

    return $this->createListByIds($ids, $params);
  }

  public function getSubList(array $params = array())
  {
//	$counts = array();
//	$countsRaw = Doctrine_Manager::connection()->fetchAll('
//		SELECT  `id` , COUNT( * ) as `c`
//		FROM  `product_category`
//		JOIN product_category_product_relation ON product_category.id = product_category_product_relation.product_category_id
//		GROUP BY id
//	');
//	foreach ($countsRaw as $raw) {
//		$counts;
//	}
	$notEmptyCats = array();
	$notEmptyCatsRaw = Doctrine_Manager::connection()->fetchAll('SELECT DISTINCT pc.product_category_id FROM product_category_product_relation pc INNER JOIN product p ON pc.product_id = p.id WHERE p.is_instock = ?', array(1, ));
//	$notEmptyCatsRaw = Doctrine_Manager::connection()->fetchAll('
//		SELECT DISTINCT product_category_id FROM product_category_product_relation
//		JOIN product_category ON product_category.id = product_category_product_relation.product_category_id
//		WHERE product_category.level > 1
//	');
	foreach ($notEmptyCatsRaw as $raw) {
		$notEmptyCats[] = $raw['product_category_id'];
	}

    $q = $this->createBaseQuery($params);
    $this->setQueryParameters($q, $params);


	if (!empty($params['root_id'])) {
		$q->andWhereIn('productCategory.root_id = ?', (int)$params['root_id']);
	}
	$q->andWhere('productCategory.level = 1');
	$q->orWhereIn('productCategory.id', $notEmptyCats);
    $q->orderBy('productCategory.lft');

    $q->useResultCache(true, null, $this->getQueryHash('productCategory-sub', $params));

	return $q->execute();

    $ids = $this->getIdsByQuery($q);

    return $this->createListByIds($ids, $params);
  }

  public function getDescendatIds(ProductCategory $category = null)
  {
    if (!$category)
    {
      return false;
    }

    //берем все дочение категории(мб велосипед не изобретать и можно использовать this->getNode() ?)
    $q = $this->createBaseQuery();
    $q->addWhere('productCategory.lft > ? and productCategory.rgt < ? and productCategory.root_id = ?', array($category->lft, $category->rgt, empty($category->root_id) ? $category->id : $category->root_id, ));
    $q->useResultCache(true, null, $this->getQueryHash('productCategory-descendants', array($category->id, )));

    $categoryIds = $this->getIdsByQuery($q);
    $categoryIds[] = $category->id;

    return $categoryIds;
  }

  public function getTagIds(ProductCategory $category = null)
  {
    if (!$category)
    {
      return false;
    }

    $categoryIds = $this->getDescendatIds($category);

    $q = TagProductRelationTable::getInstance()->createBaseQuery();
    $q->select('DISTINCT tagProductRelation.tag_id')
      ->innerJoin('tagProductRelation.Product product WITH product.is_instock = ?', 1)
      ->innerJoin('product.CategoryRelation categoryRelation')
      ->andWhereIn('categoryRelation.product_category_id', $categoryIds)
      ->setHydrationMode(Doctrine_Core::HYDRATE_SINGLE_SCALAR)
      ->useResultCache(true, null, $this->getQueryHash('productCategory-Tag', $categoryIds));
    ;

    return $q->execute();
  }
}