<?php

/**
 * TaskTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class TaskTable extends myDoctrineTable
{

  /**
   * Returns an instance of this class.
   *
   * @return object TaskTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('Task');
  }

  public function getDefaultParameters()
  {
    return array(
      'with_minPriority'   => true,
      'check_zeroPriority' => true,
    );
  }

  public function createBaseQuery(array $params = array())
  {
    $this->applyDefaultParameters($params);

    $q = $this->createQuery('task');

    $q->orderBy('priority ASC, core_packet_id ASC, created_at ASC');

    return $q;
  }

  public function getRunningList(array $params = array())
  {
    $q = $this->createBaseQuery($params);
    $q->addWhere('task.status = ?', 'run');

    $this->setQueryParameters($q, $params);

    return $q->execute();
  }

  public function getRunning(array $params = array())
  {
    $this->applyDefaultParameters($params);

    $q = $this->createBaseQuery($params);
    $q->addWhere('task.status = ?', 'run');

    // проверить наличие задачи с приоритетом реального времени
    if ($params['check_zeroPriority'])
    {
      if ($this->getZeroPriority())
      {
        return false;
      }
    }

    if ($params['with_minPriority'])
    {
      if ($priority = $this->getMinPriority())
      {
        $q->addWhere('task.priority = ?', $priority);
      }
    }

    $this->setQueryParameters($q, $params);

    return $q->fetchOne();
  }

  public function getByCoreId($coreId, array $params = array())
  {
    return $this->createQuery()
      ->where('core_id = ?', $coreId)
      ->orderBy('updated_at DESC')
      ->fetchOne()
    ;
  }

  public function getMinPriority()
  {
    return $this->createQuery()
      ->select('MIN(priority) AS priority_min')
      ->where('status = ?', 'run')
      ->setHydrationMode(Doctrine_Core::HYDRATE_SINGLE_SCALAR)
      ->fetchOne()
    ;
  }

  public function getPriorityByType($type)
  {
    $priorities = array(
      'project.init' => 1,
      'project.sync' => 2,
      'default'      => 3,
    );

    return isset($priorities[$type]) ? $priorities[$type] : $priorities['default'];
  }

  public function getZeroPriority()
  {
    return $this->createQuery()
      ->select('id')
      ->where('priority = ?', 0)
      ->setHydrationMode(Doctrine_Core::HYDRATE_SINGLE_SCALAR)
      ->fetchOne()
    ;
  }

  public function retrieveAdminList(Doctrine_Query $q)
  {
    $alias = $q->getRootAlias();

    $q->orderBy("{$alias}.priority ASC");

    return $q;
  }

  public function getMaxCorePacketId($type)
  {
     return $this->createQuery()
      ->select('MAX(core_packet_id) AS core_packet_id_max')
      ->where('type = ?', $type)
      ->setHydrationMode(Doctrine_Core::HYDRATE_SINGLE_SCALAR)
      ->fetchOne()
    ;
  }
}