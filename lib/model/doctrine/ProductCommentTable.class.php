<?php

/**
 * ProductCommentTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ProductCommentTable extends myDoctrineTable
{

  /**
   * Returns an instance of this class.
   *
   * @return object ProductCommentTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('ProductComment');
  }

  public function getCoreMapping()
  {
    return array(
      'id'        => 'core_id',
      'parent_id' => 'core_parent_id',
      'user_id'   => 'core_user_id',
      //'added'     => 'created_at',
      'content'   => 'content',
      //'helpful'   => 'helpful',
      //'unhelpful' => 'unhelpful',
    );
  }

  public function getDefaultParameters()
  {
    return array();
  }

  public function createBaseQuery(array $params = array())
  {
    $this->applyDefaultParameters($params);

    $q = $this->createQuery('productComment');

//    $q
//      ->where('productComment.level > ?', 0)
//      ->orderBy('productComment.rgt DESC')
//    ;

    return $q;
  }

  /**
   *
   * @param Product $product
   * @param array $params
   * @return myDoctrinePager 
   */
  public function getListByProduct(Product $product, array $params = array())
  {
    $this->applyDefaultParameters($params);

    $q = $this->createBaseQuery($params);

    $q->leftJoin('productComment.User user')
      ->addWhere('productComment.product_id = ?', $product->id)
	  ->addWhere('parent_id = ?', $params['parent_id'])
      //->useResultCache(true, null, $this->getQueryHash("product-{$product->id}/productComment-all", $params))
    ;

    $this->setQueryParameters($q, $params);
	
	if (isset($params['page'])) {
		switch ($params['sort']) {
			case 'created_desc':
				$q->orderBy('productComment.created_at DESC');
				break;
			case 'created_asc':
			default:
				$q->orderBy('productComment.created_at');
				break;
		}
		$pager = new myDoctrinePager('ProductComment', 2);
		$pager->setQuery($q);
		$pager->setPage($params['page']);
		$pager->init();
		return $pager;
	} else {
		$q->orderBy('productComment.created_at');
		$ids = $this->getIdsByQuery($q);
		return $this->createListByIds($ids, $params);
	}
  }

  public function getListByUser(User $user, array $params = array())
  {
    $this->applyDefaultParameters($params);

    $q = $this->createBaseQuery($params);

    $q->addWhere('productComment.user_id = ?', $user->id);

    $this->setQueryParameters($q, $params);

    $ids = $this->getIdsByQuery($q);

    return $this->createListByIds($ids, $params);
  }

  public function getRoot($product_id)
  {
    $q = $this->createQuery()
      ->where('product_id = ? AND level = ?', array($product_id, 0))
    ;

    $record = $q->fetchOne();
    if (!$record)
    {
      $record = new ProductComment();
      $record->product_id = $product_id;
      $record->save();

      $tree = $this->getTree();
      $tree->createRoot($record);
    }
    return $record;
  }

}