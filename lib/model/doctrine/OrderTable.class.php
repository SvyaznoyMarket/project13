<?php

/**
 * OrderTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class OrderTable extends myDoctrineTable
{

  /**
   * Returns an instance of this class.
   *
   * @return object OrderTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('Order');
  }

  public function getCoreMapping()
  {
    return array(
      'id'                    => 'core_id',
      'number'                => 'number',
      'is_legal'              => 'is_legal',
      'last_name'             => 'recipient_last_name',
      'first_name'            => 'recipient_first_name',
      'middle_name'           => 'recipient_middle_name',
      'mobile'                => 'recipient_phonenumbers',
      'is_receive_sms'        => 'is_receive_sms',
      'payment_status_id'     => 'payment_status_id',
      'payment_detail'        => 'payment_details',
      'sum'                   => 'sum',
      'is_delivery'           => 'is_delivery',
      'delivery_date'         => 'delivered_at',
      'address'               => 'address',
      'zip_code'              => 'zip_code',
      'is_gift'               => 'is_gift',
      'extra'                 => 'extra',
      'ip'                    => 'ip',
      'is_paid_delivery'      => 'is_paid_delivery',
      'store_id'              => 'store_id',
      'added'                 => 'core_created_at',

      'user_id'               => array('rel' => 'User'),
      'status_id'             => array('rel' => 'Status'),
      'payment_id'            => array('rel' => 'PaymentMethod'),
      'geo_id'                => array('rel' => 'Region'),
      'delivery_interval_id'  => array('rel' => 'DeliveryPeriod'),
      'delivery_type_id'      => array('rel' => 'DeliveryType'),
      'address_id'            => array('rel' => 'UserAddress'),
      'shop_id'               => array('rel' => 'Shop'),
//      'product'               => array('rel' => 'Product'),
    );
  }

  public function getDefaultParameters()
  {
    return array(
      'with_products' => false,
    );
  }

  public function createBaseQuery(array $params = array())
  {
    $this->applyDefaultParameters($params);

    $q = $this->createQuery('order');

    if ($params['with_products'])
    {
      $q->leftJoin('order.ProductRelation orderProductRelation')
        ->addOrderBy('orderProductRelation.position')
      ;
    }

    return $q;
  }

  public function getRecordById($id, array $params = array())
  {
    $this->applyDefaultParameters($params);

    $q = $this->createBaseQuery($params);

    $this->setQueryParameters($q, $params);

    $q->whereId($id);

    $list = $q->execute();
    foreach ($list as $i => $record)
    {
      if ($params['with_products'])
      {
        foreach ($record['ProductRelation'] as $productRelation)
        {
          $productRelation['Product'] = ProductTable::getInstance()->getById($productRelation['product_id']);
        }
      }

      if (is_array($record))
      {
        $list[$i] = $record;
      }
    }

    return $this->getResult($list, is_scalar($id));
  }

  public function getByToken($token, array $params = array())
  {
    $id = $this->getIdBy('token', $token);

    return $this->getById($id, $params);
  }

  public function getForRoute(array $params)
  {
    $id = isset($params['order']) ? $this->getIdBy('token', $params['order']) : null;

    return $this->getById($id, array(
      'with_products' => true,
    ));
  }

  public function getListByUser($user_id, array $params = array())
  {
    $this->applyDefaultParameters($params);

    $q = $this->createBaseQuery($params);

    $q->addWhere('order.user_id = ?', $user_id)
            ->orderBy('delivered_at DESC');

    $this->setQueryParameters($q, $params);

    $ids = $this->getIdsByQuery($q);

    return $this->createListByIds($ids, $params);
  }
}