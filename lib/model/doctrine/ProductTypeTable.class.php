<?php

/**
 * ProductTypeTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ProductTypeTable extends myDoctrineTable
{

  /**
   * Returns an instance of this class.
   *
   * @return object ProductTypeTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('ProductType');
  }

  public function getCoreMapping()
  {
    return array(
      'id'    => 'core_id',
      'name'  => 'name',
      'added' => 'created_at',
    );
  }

  public function getDefaultParameters()
  {
    return array(
      'view'           => false, // list, show
      'group_property' => false, // группировать свойства товара по группам
    );
  }

  public function createBaseQuery(array $params = array())
  {
    $this->applyDefaultParameters($params);

    $q = $this->createQuery('productType');

    if ($params['view'])
    {
      $with = (in_array($params['view'], array('show', 'list'))) ? (' WITH productTypePropertyRelation.view_'.$params['view'].' = true') : '';
      $q->leftJoin('productType.PropertyRelation productTypePropertyRelation'.$with)
        ->addOrderBy('productTypePropertyRelation.group_id, productTypePropertyRelation.group_position')
      ;

      if ($params['group_property'])
      {
        $q->leftJoin('productType.PropertyGroupRelation propertyGroupRelation')
          ->leftJoin('propertyGroupRelation.PropertyGroup propertyGroup')
          ->addOrderBy('propertyGroupRelation.position')
//        $q->leftJoin('productType.PropertyGroup productPropertyGroup')
//          ->addOrderBy('productPropertyGroup.position')
        ;
      }
    }

    return $q;
  }

  public function getById($id, array $params = array())
  {
    $q = $this->createBaseQuery($params);

    $this->setQueryParameters($q, $params);

    $q->addWhere('productType.id = ?', $id);
    $q->useResultCache(true, null, $this->getRecordQueryHash($id, $params));

    $record = $q->fetchOne();
    if (!$record)
    {
      return $record;
    }

    if ($params['view'])
    {
      $groupedPropertyArray = array();
      foreach ($record['PropertyRelation'] as $propertyRelation)
      {
        $propertyRelation['Property'] = ProductPropertyTable::getInstance()->getById($propertyRelation['property_id']);

        if (!isset($groupedPropertyArray[$propertyRelation->group_id]))
        {
          $groupedPropertyArray[$propertyRelation->group_id] = ProductPropertyTable::getInstance()->createList();
        }
        $groupedPropertyArray[$propertyRelation->group_id][] = $propertyRelation['Property'];
      }

      foreach ($record['PropertyGroup'] as $propertyGroup)
      {
        // TODO: Сделать поприличнее
        if (isset($groupedPropertyArray[$propertyGroup->id])) {
          $propertyGroup['Property'] = $groupedPropertyArray[$propertyGroup->id];
        }
        else
        {
          sfContext::getInstance()->getLogger()->err('{'.get_class($this).'} Can\'t add ProductProperty to ProductPropertyGroup');
        }
      }
    }

    return $record;
  }

  public function getListByTag(Tag $tag, array $params = array())
  {
    $this->applyDefaultParameters($params, array(
      'with_productCount' => false,
    ));

    $q = $this->createBaseQuery($params);

    $this->setQueryParameters($q, $params);

    $q->leftJoin('productType.Product product WITH product.is_instock = 1')
      ->leftJoin('product.TagRelation tagProductRelation')
      ->addWhere('tagProductRelation.tag_id = ?', $tag->id)
    ;

    if ($params['with_productCount'])
    {
      $q->addSelect('COUNT(product.id) AS _product_count');
    }

    return $q->execute();
  }
}