<?php

/**
 * ProductTypeTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ProductTypeTable extends myDoctrineTable
{

  /**
   * Returns an instance of this class.
   *
   * @return object ProductTypeTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('ProductType');
  }

  public function getQueryRootAlias()
  {
    return 'productType';
  }

  public function getCoreMapping()
  {
    return array(
      'id'        => 'core_id',
      'name'      => 'name',
      'added'     => 'created_at',

      'category'  => array('rel' => 'ProductCategory'),
    );
  }

  public function getDefaultParameters()
  {
    return array(
      'view'           => false, // list, show
      'group_property' => false, // группировать свойства товара по группам
      'hydrate_array'  => false,
    );
  }

  public function createBaseQuery(array $params = array())
  {
    $this->applyDefaultParameters($params);

    $q = $this->createQuery('productType');

    if ($params['view'])
    {
      $with = (in_array($params['view'], array('show', 'list'))) ? (' WITH productTypePropertyRelation.view_'.$params['view'].' = true') : '';
      $q->leftJoin('productType.PropertyRelation productTypePropertyRelation'.$with)
        ->addOrderBy('productTypePropertyRelation.group_id, productTypePropertyRelation.group_position') // TODO: check
      ;

      $q->leftJoin('productTypePropertyRelation.Property productProperty');

      if ($params['group_property'])
      {
        $q->leftJoin('productType.PropertyGroupRelation propertyGroupRelation')
          ->leftJoin('propertyGroupRelation.PropertyGroup propertyGroup')
          ->addOrderBy('propertyGroupRelation.position') // TODO: check
        ;
      }
    }

    return $q;
  }

  public function getRecordById($id, array $params = array())
  {
    $this->applyDefaultParameters($params);

    $q = $this->createBaseQuery($params);

    $this->setQueryParameters($q, $params);

    $q->whereId($id);

    if ($params['hydrate_array'])
    {
      $q->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);
    }

    $list = $q->execute();
    foreach ($list as $i => $record)
    {
      if ($params['view'])
      {
        $groupedPropertyArray = array();
        foreach ($record['PropertyRelation'] as $i => $propertyRelation)
        {
          //$record['PropertyRelation'][$i]['Property'] = ProductPropertyTable::getInstance()->getById($propertyRelation['property_id'], array('hydrate_array' => $params['hydrate_array']));

          if ($params['group_property'])
          {
            if (!isset($groupedPropertyArray[$propertyRelation['group_id']]))
            {
              $groupedPropertyArray[$propertyRelation['group_id']] = ProductPropertyTable::getInstance()->createList();
            }
            $groupedPropertyArray[$propertyRelation['group_id']][] = $propertyRelation['Property'];
          }

          if ($params['hydrate_array'])
          {
            $record['Property'][$i] = &$record['PropertyRelation'][$i]['Property'];
          }
        }

        if ($params['group_property'])
        {
          foreach ($record['PropertyGroup'] as $propertyGroup)
          {
            // TODO: Сделать поприличнее
            //if (isset($groupedPropertyArray[$propertyGroup->id])) {
            if (array_key_exists($propertyGroup['id'], $groupedPropertyArray))
            {
              $propertyGroup['Property'] = $groupedPropertyArray[$propertyGroup['id']];
            }
            else
            {
              //sfContext::getInstance()->getLogger()->err('{'.get_class($this).'} Can\'t add ProductProperty to ProductPropertyGroup');
            }
          }
        }
      }

      if (is_array($record))
      {
        $list[$i] = $record;
      }
    }

    return $this->getResult($list, is_scalar($id));
  }

  public function getListByTag(Tag $tag, array $params = array())
  {
    $this->applyDefaultParameters($params, array(
      'with_productCount' => false,
      'product_view'      => 'list',
    ));

    $q = $this->createBaseQuery($params);

    $this->setQueryParameters($q, $params);

    $q->leftJoin('productType.Product product')
      ->leftJoin('product.TagRelation tagProductRelation')
      ->addWhere('tagProductRelation.tag_id = ?', $tag->id)
    ;

    if ($params['product_view'])
    {
      $q->addWhere("product.view_{$params['product_view']} = 1");
    }

    if ($params['with_productCount'])
    {
      $q
        ->addSelect('COUNT(product.id) AS _product_count')
        ->orderBy('COUNT(product.id) DESC')
      ;
    }

    return $q->execute();
  }

  public function getListByProductCategory(ProductCategory $productCategory, array $params = array())
  {
    $this->applyDefaultParameters($params, array(
      'with_productCount' => false,
    ));

    $q = $this->createBaseQuery($params);

    $this->setQueryParameters($q, $params);

    $q->leftJoin('productType.ProductCategoryRelation productCategoryTypeRelation')
      ->andWhereIn('productCategoryTypeRelation.product_category_id', $productCategory->getDescendantIds(array('with_parent' => true)))
    ;

    if ($params['with_productCount'])
    {
      $q->addSelect('COUNT(product.id) product_count')
        ->leftJoin('productType.Product product WITH product.is_instock = 1')
        //->groupBy('productType.id')
      ;
    }

    return $q->execute();
  }
}