<?php

/**
 * ProductTypeTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ProductTypeTable extends myDoctrineTable
{

  /**
   * Returns an instance of this class.
   *
   * @return object ProductTypeTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('ProductType');
  }

  public function getDefaultParameters()
  {
    return array(
      'view'           => false, // list, show
      'group_property' => false, // группировать свойства товара по группам
    );
  }

  public function createBaseQuery(array $params = array())
  {
    $this->applyDefaultParameters($params);

    $q = $this->createQuery('productType');

    $with = (in_array($params['view'], array('show', 'list'))) ? (' WITH productTypePropertyRelation.view_'.$params['view'].' = true') : '';
    $q->leftJoin('productType.PropertyRelation productTypePropertyRelation'.$with)
      ->addOrderBy('productTypePropertyRelation.position')
    ;

    if ($params['group_property'])
    {
      $q->leftJoin('productType.PropertyGroup productPropertyGroup')
        ->addOrderBy('productPropertyGroup.position')
      ;
    }

    return $q;
  }

  public function getById($id, array $params = array())
  {
    $q = $this->createBaseQuery($params);

    $this->setQueryParameters($q, $params);

    $q->addWhere('productType.id = ?', $id);
    $q->useResultCache(true, null, $this->getRecordQueryHash($id, $params));

    $record = $q->fetchOne();
    if (!$record)
    {
      return $record;
    }

    $groupedPropertyArray = array();
    foreach ($record['PropertyRelation'] as $propertyRelation)
    {
      $propertyRelation['Property'] = ProductPropertyTable::getInstance()->getById($propertyRelation['property_id']);

      if (!isset($groupedPropertyArray[$propertyRelation->group_id]))
      {
        $groupedPropertyArray[$propertyRelation->group_id] = ProductPropertyTable::getInstance()->createList();
      }
      $groupedPropertyArray[$propertyRelation->group_id][] = $propertyRelation['Property'];
    }

    foreach ($record['PropertyGroup'] as $propertyGroup)
    {
      $propertyGroup['Property'] = $groupedPropertyArray[$propertyGroup->id];
    }

    return $record;
  }
}