<?php

/**
 * CreatorTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class CreatorTable extends myDoctrineTable
{

  /**
   * Returns an instance of this class.
   *
   * @return object CreatorTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('Creator');
  }

  public function getCoreMapping()
  {
    return array(
      'id'              => 'core_id',
      'name'            => 'name',
      'description'     => 'description',
      'is_view_filter'  => 'is_filter',
      'added'           => 'created_at',
    );
  }

  public function getDefaultParameters()
  {
    return array(
      'for_filter'  => false, // для фильтров
    );
  }

  public function createBaseQuery(array $params = array())
  {
    $q = parent::createBaseQuery($params);

    if ($params['for_filter'])
    {
      $q->addWhere('creator.is_filter = ?', 1);
    }

    return $q;
  }

  public function getById($id, array $params = array())
  {
    $this->applyDefaultParameters($params);

    $q = $this->createBaseQuery($params);

    $this->setQueryParameters($q);

    $q->addWhere('creator.id = ?', $id);
    $q->useResultCache(true, null, $this->getRecordQueryHash($id, $params));

    return $q->fetchOne();
  }

  public function getForRoute(array $params)
  {
    $id = isset($params['creator']) ? $this->getIdBy('token', $params['creator']) : null;

    return $this->getById($id, array());
  }

  public function getListByProductCategory(ProductCategory $productCategory, array $params = array())
  {
    $this->applyDefaultParameters($params);

    $q = $this->createBaseQuery($params);

    $q->innerJoin('creator.Product product')
//    $q->innerJoin('creator.Product product WITH product.is_instock = ?', 1)
      ->innerJoin('product.Category category WITH category.id = ?', $productCategory->id)
      //->addWhere('category.id = ?', $productCategory->id)
      //->where('product.category_id = ?', $productCategory->id)
      ->useResultCache(true, null, $this->getQueryHash("productCategory-{$productCategory->id}/creator-all", $params))
    ;

    $this->setQueryParameters($q, $params);

    $ids = $this->getIdsByQuery($q);

    return $this->createListByIds($ids, $params);
  }
}