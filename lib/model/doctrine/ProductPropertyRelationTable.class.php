<?php

/**
 * ProductPropertyRelationTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ProductPropertyRelationTable extends myDoctrineTable
{

  /**
   * Returns an instance of this class.
   *
   * @return object ProductPropertyRelationTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('ProductPropertyRelation');
  }

  public function getValueFieldByType($type)
  {
    $field = null;

    switch ($type)
    {
      case 'select':
        $field = 'option_id';
        break;
      case 'string':
        $field = 'value_string';
        break;
      case 'integer':
        //$field = 'value_integer';
        $field = 'value_float';
        break;
      case 'float':
        $field = 'value_float';
        break;
      case 'text':
        $field = 'value_text';
        break;
      case 'boolean':
        $field = 'value_boolean';
        break;
      default:
        $field = 'value';
        break;
    }

    return $field;
  }

  public function getCacheEraserKeys(myDoctrineRecord $record, $action = null)
  {
    $return = array();

    $q = ProductTable::getInstance()->createQuery('product')
      ->select('product.core_id')
      ->innerJoin('product.PropertyRelation productPropertyRelation')
      ->where('productPropertyRelation.property_id = ?', $record->id)
      ->setHydrationMode(Doctrine_Core::HYDRATE_SINGLE_SCALAR)
    ;

    $ids = $q->execute();
    if (!is_array($ids))
    {
      $ids = array($ids);
    }

    foreach ($ids as $id)
    {
      $return[] = "product-{$id}";
    }

    return $return;
  }
}