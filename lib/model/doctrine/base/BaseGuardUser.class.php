<?php

/**
 * BaseGuardUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $first_name
 * @property string $last_name
 * @property string $email
 * @property string $phonenumber
 * @property string $nickname
 * @property string $algorithm
 * @property string $salt
 * @property string $password
 * @property boolean $is_active
 * @property boolean $is_super_admin
 * @property timestamp $last_login
 * @property integer $core_id
 * @property enum $type
 * @property string $middle_name
 * @property string $photo
 * @property string $settings
 * @property Doctrine_Collection $Group
 * @property Doctrine_Collection $Permission
 * @property Doctrine_Collection $GuardUserPermission
 * @property Doctrine_Collection $GuardUserGroup
 * @property GuardRememberKey $RememberKeys
 * @property GuardForgotPassword $ForgotPassword
 * 
 * @method string              getFirstName()           Returns the current record's "first_name" value
 * @method string              getLastName()            Returns the current record's "last_name" value
 * @method string              getEmail()               Returns the current record's "email" value
 * @method string              getPhonenumber()         Returns the current record's "phonenumber" value
 * @method string              getNickname()            Returns the current record's "nickname" value
 * @method string              getAlgorithm()           Returns the current record's "algorithm" value
 * @method string              getSalt()                Returns the current record's "salt" value
 * @method string              getPassword()            Returns the current record's "password" value
 * @method boolean             getIsActive()            Returns the current record's "is_active" value
 * @method boolean             getIsSuperAdmin()        Returns the current record's "is_super_admin" value
 * @method timestamp           getLastLogin()           Returns the current record's "last_login" value
 * @method integer             getCoreId()              Returns the current record's "core_id" value
 * @method enum                getType()                Returns the current record's "type" value
 * @method string              getMiddleName()          Returns the current record's "middle_name" value
 * @method string              getPhoto()               Returns the current record's "photo" value
 * @method string              getSettings()            Returns the current record's "settings" value
 * @method Doctrine_Collection getGroup()               Returns the current record's "Group" collection
 * @method Doctrine_Collection getPermission()          Returns the current record's "Permission" collection
 * @method Doctrine_Collection getGuardUserPermission() Returns the current record's "GuardUserPermission" collection
 * @method Doctrine_Collection getGuardUserGroup()      Returns the current record's "GuardUserGroup" collection
 * @method GuardRememberKey    getRememberKeys()        Returns the current record's "RememberKeys" value
 * @method GuardForgotPassword getForgotPassword()      Returns the current record's "ForgotPassword" value
 * @method GuardUser           setFirstName()           Sets the current record's "first_name" value
 * @method GuardUser           setLastName()            Sets the current record's "last_name" value
 * @method GuardUser           setEmail()               Sets the current record's "email" value
 * @method GuardUser           setPhonenumber()         Sets the current record's "phonenumber" value
 * @method GuardUser           setNickname()            Sets the current record's "nickname" value
 * @method GuardUser           setAlgorithm()           Sets the current record's "algorithm" value
 * @method GuardUser           setSalt()                Sets the current record's "salt" value
 * @method GuardUser           setPassword()            Sets the current record's "password" value
 * @method GuardUser           setIsActive()            Sets the current record's "is_active" value
 * @method GuardUser           setIsSuperAdmin()        Sets the current record's "is_super_admin" value
 * @method GuardUser           setLastLogin()           Sets the current record's "last_login" value
 * @method GuardUser           setCoreId()              Sets the current record's "core_id" value
 * @method GuardUser           setType()                Sets the current record's "type" value
 * @method GuardUser           setMiddleName()          Sets the current record's "middle_name" value
 * @method GuardUser           setPhoto()               Sets the current record's "photo" value
 * @method GuardUser           setSettings()            Sets the current record's "settings" value
 * @method GuardUser           setGroup()               Sets the current record's "Group" collection
 * @method GuardUser           setPermission()          Sets the current record's "Permission" collection
 * @method GuardUser           setGuardUserPermission() Sets the current record's "GuardUserPermission" collection
 * @method GuardUser           setGuardUserGroup()      Sets the current record's "GuardUserGroup" collection
 * @method GuardUser           setRememberKeys()        Sets the current record's "RememberKeys" value
 * @method GuardUser           setForgotPassword()      Sets the current record's "ForgotPassword" value
 * 
 * @package    enter
 * @subpackage model
 * @author     Связной Маркет
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseGuardUser extends myDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('guard_user');
        $this->hasColumn('first_name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'notnull' => true,
             'notblank' => true,
             'comment' => 'Имя',
             ));
        $this->hasColumn('last_name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'notnull' => true,
             'notblank' => true,
             'comment' => 'Фамилия',
             ));
        $this->hasColumn('email', 'string', 128, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 128,
             ));
        $this->hasColumn('phonenumber', 'string', 20, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 20,
             'comment' => 'Телефонный номер',
             ));
        $this->hasColumn('nickname', 'string', 128, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 128,
             ));
        $this->hasColumn('algorithm', 'string', 128, array(
             'type' => 'string',
             'notnull' => true,
             'default' => 'sha1',
             'length' => 128,
             ));
        $this->hasColumn('salt', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('password', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('is_active', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));
        $this->hasColumn('is_super_admin', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));
        $this->hasColumn('last_login', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('core_id', 'integer', 20, array(
             'type' => 'integer',
             'notnull' => false,
             'comment' => 'ид записи в Core',
             'length' => 20,
             ));
        $this->hasColumn('type', 'enum', 10, array(
             'type' => 'enum',
             'length' => 10,
             'values' => 
             array(
              0 => 'admin',
              1 => 'client',
              2 => 'partner',
             ),
             'notnull' => true,
             'default' => 'client',
             ));
        $this->hasColumn('middle_name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'notblank' => true,
             'comment' => 'Отчество',
             'length' => 255,
             ));
        $this->hasColumn('photo', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'comment' => 'Фото',
             'length' => 255,
             ));
        $this->hasColumn('settings', 'string', null, array(
             'type' => 'string',
             'notnull' => false,
             'comment' => 'Настройки личного кабинета',
             ));


        $this->index('is_active_idx', array(
             'fields' => 
             array(
              0 => 'is_active',
             ),
             ));
        $this->option('comment', 'Пользователь');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('GuardGroup as Group', array(
             'refClass' => 'GuardUserGroup',
             'local' => 'user_id',
             'foreign' => 'group_id'));

        $this->hasMany('GuardPermission as Permission', array(
             'refClass' => 'GuardUserPermission',
             'local' => 'user_id',
             'foreign' => 'permission_id'));

        $this->hasMany('GuardUserPermission', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('GuardUserGroup', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasOne('GuardRememberKey as RememberKeys', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasOne('GuardForgotPassword as ForgotPassword', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $this->actAs($timestampable0);
    }
}