<?php

/**
 * BaseTagGroupRelation
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $tag_id
 * @property integer $group_id
 * @property Tag $Tag
 * @property TagGroup $Group
 * 
 * @method integer          getTagId()    Returns the current record's "tag_id" value
 * @method integer          getGroupId()  Returns the current record's "group_id" value
 * @method Tag              getTag()      Returns the current record's "Tag" value
 * @method TagGroup         getGroup()    Returns the current record's "Group" value
 * @method TagGroupRelation setTagId()    Sets the current record's "tag_id" value
 * @method TagGroupRelation setGroupId()  Sets the current record's "group_id" value
 * @method TagGroupRelation setTag()      Sets the current record's "Tag" value
 * @method TagGroupRelation setGroup()    Sets the current record's "Group" value
 * 
 * @package    enter
 * @subpackage model
 * @author     Связной Маркет
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTagGroupRelation extends myDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('tag_group_relation');
        $this->hasColumn('tag_id', 'integer', 20, array(
             'type' => 'integer',
             'primary' => true,
             'length' => 20,
             ));
        $this->hasColumn('group_id', 'integer', 20, array(
             'type' => 'integer',
             'primary' => true,
             'length' => 20,
             ));

        $this->option('comment', 'Связь тега и группы тегов');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Tag', array(
             'local' => 'tag_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('TagGroup as Group', array(
             'local' => 'group_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $this->actAs($timestampable0);
    }
}