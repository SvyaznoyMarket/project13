<?php

/**
 * BaseProductCategory
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $root_id
 * @property integer $lft
 * @property integer $rgt
 * @property integer $level
 * @property string $token
 * @property string $name
 * @property integer $filter_group_id
 * @property ProductFilterGroup $FilterGroup
 * @property Doctrine_Collection $Product
 * @property Doctrine_Collection $TagRelation
 * 
 * @method integer             getId()              Returns the current record's "id" value
 * @method integer             getRootId()          Returns the current record's "root_id" value
 * @method integer             getLft()             Returns the current record's "lft" value
 * @method integer             getRgt()             Returns the current record's "rgt" value
 * @method integer             getLevel()           Returns the current record's "level" value
 * @method string              getToken()           Returns the current record's "token" value
 * @method string              getName()            Returns the current record's "name" value
 * @method integer             getFilterGroupId()   Returns the current record's "filter_group_id" value
 * @method ProductFilterGroup  getFilterGroup()     Returns the current record's "FilterGroup" value
 * @method Doctrine_Collection getProduct()         Returns the current record's "Product" collection
 * @method Doctrine_Collection getTagRelation()     Returns the current record's "TagRelation" collection
 * @method ProductCategory     setId()              Sets the current record's "id" value
 * @method ProductCategory     setRootId()          Sets the current record's "root_id" value
 * @method ProductCategory     setLft()             Sets the current record's "lft" value
 * @method ProductCategory     setRgt()             Sets the current record's "rgt" value
 * @method ProductCategory     setLevel()           Sets the current record's "level" value
 * @method ProductCategory     setToken()           Sets the current record's "token" value
 * @method ProductCategory     setName()            Sets the current record's "name" value
 * @method ProductCategory     setFilterGroupId()   Sets the current record's "filter_group_id" value
 * @method ProductCategory     setFilterGroup()     Sets the current record's "FilterGroup" value
 * @method ProductCategory     setProduct()         Sets the current record's "Product" collection
 * @method ProductCategory     setTagRelation()     Sets the current record's "TagRelation" collection
 * 
 * @package    enter
 * @subpackage model
 * @author     Связной Маркет
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseProductCategory extends myDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('product_category');
        $this->hasColumn('id', 'integer', 20, array(
             'type' => 'integer',
             'autoincrement' => true,
             'primary' => true,
             'length' => 20,
             ));
        $this->hasColumn('root_id', 'integer', 20, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 20,
             ));
        $this->hasColumn('lft', 'integer', 20, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 20,
             ));
        $this->hasColumn('rgt', 'integer', 20, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 20,
             ));
        $this->hasColumn('level', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('token', 'string', 255, array(
             'type' => 'string',
             'unique' => true,
             'notnull' => true,
             'notblank' => true,
             'length' => 255,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'notblank' => true,
             'length' => 255,
             ));
        $this->hasColumn('filter_group_id', 'integer', 20, array(
             'type' => 'integer',
             'notnull' => false,
             'length' => 20,
             ));

        $this->option('comment', 'Категория товара');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('ProductFilterGroup as FilterGroup', array(
             'local' => 'filter_group_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasMany('Product', array(
             'local' => 'id',
             'foreign' => 'category_id'));

        $this->hasMany('TagProductCategoryRelation as TagRelation', array(
             'local' => 'id',
             'foreign' => 'product_category_id'));

        $nestedset0 = new Doctrine_Template_NestedSet(array(
             'hasManyRoots' => true,
             'rootColumnName' => 'root_id',
             ));
        $this->actAs($nestedset0);
    }
}