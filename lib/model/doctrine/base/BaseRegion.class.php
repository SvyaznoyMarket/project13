<?php

/**
 * BaseRegion
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $core_id
 * @property integer $core_parent_id
 * @property integer $root_id
 * @property integer $product_price_list_id
 * @property integer $stock_id
 * @property integer $lft
 * @property integer $rgt
 * @property integer $level
 * @property string $token
 * @property string $name
 * @property set $type
 * @property boolean $is_default
 * @property ProductPriceList $PriceList
 * @property Stock $Stock
 * @property Doctrine_Collection $ServicePrice
 * @property Doctrine_Collection $ServiceCenter
 * @property Doctrine_Collection $User
 * @property Doctrine_Collection $UserAddress
 * 
 * @method integer             getId()                    Returns the current record's "id" value
 * @method integer             getCoreId()                Returns the current record's "core_id" value
 * @method integer             getCoreParentId()          Returns the current record's "core_parent_id" value
 * @method integer             getRootId()                Returns the current record's "root_id" value
 * @method integer             getProductPriceListId()    Returns the current record's "product_price_list_id" value
 * @method integer             getStockId()               Returns the current record's "stock_id" value
 * @method integer             getLft()                   Returns the current record's "lft" value
 * @method integer             getRgt()                   Returns the current record's "rgt" value
 * @method integer             getLevel()                 Returns the current record's "level" value
 * @method string              getToken()                 Returns the current record's "token" value
 * @method string              getName()                  Returns the current record's "name" value
 * @method set                 getType()                  Returns the current record's "type" value
 * @method boolean             getIsDefault()             Returns the current record's "is_default" value
 * @method ProductPriceList    getPriceList()             Returns the current record's "PriceList" value
 * @method Stock               getStock()                 Returns the current record's "Stock" value
 * @method Doctrine_Collection getServicePrice()          Returns the current record's "ServicePrice" collection
 * @method Doctrine_Collection getServiceCenter()         Returns the current record's "ServiceCenter" collection
 * @method Doctrine_Collection getUser()                  Returns the current record's "User" collection
 * @method Doctrine_Collection getUserAddress()           Returns the current record's "UserAddress" collection
 * @method Region              setId()                    Sets the current record's "id" value
 * @method Region              setCoreId()                Sets the current record's "core_id" value
 * @method Region              setCoreParentId()          Sets the current record's "core_parent_id" value
 * @method Region              setRootId()                Sets the current record's "root_id" value
 * @method Region              setProductPriceListId()    Sets the current record's "product_price_list_id" value
 * @method Region              setStockId()               Sets the current record's "stock_id" value
 * @method Region              setLft()                   Sets the current record's "lft" value
 * @method Region              setRgt()                   Sets the current record's "rgt" value
 * @method Region              setLevel()                 Sets the current record's "level" value
 * @method Region              setToken()                 Sets the current record's "token" value
 * @method Region              setName()                  Sets the current record's "name" value
 * @method Region              setType()                  Sets the current record's "type" value
 * @method Region              setIsDefault()             Sets the current record's "is_default" value
 * @method Region              setPriceList()             Sets the current record's "PriceList" value
 * @method Region              setStock()                 Sets the current record's "Stock" value
 * @method Region              setServicePrice()          Sets the current record's "ServicePrice" collection
 * @method Region              setServiceCenter()         Sets the current record's "ServiceCenter" collection
 * @method Region              setUser()                  Sets the current record's "User" collection
 * @method Region              setUserAddress()           Sets the current record's "UserAddress" collection
 * 
 * @package    enter
 * @subpackage model
 * @author     Связной Маркет
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseRegion extends myDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('region');
        $this->hasColumn('id', 'integer', 20, array(
             'type' => 'integer',
             'autoincrement' => true,
             'primary' => true,
             'length' => 20,
             ));
        $this->hasColumn('core_id', 'integer', 20, array(
             'type' => 'integer',
             'notnull' => false,
             'comment' => 'ид записи в Core',
             'length' => 20,
             ));
        $this->hasColumn('core_parent_id', 'integer', 20, array(
             'type' => 'integer',
             'notnull' => false,
             'comment' => 'ид родителя записи в Core',
             'length' => 20,
             ));
        $this->hasColumn('root_id', 'integer', 20, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 20,
             ));
        $this->hasColumn('product_price_list_id', 'integer', 20, array(
             'type' => 'integer',
             'notnull' => false,
             'length' => 20,
             ));
        $this->hasColumn('stock_id', 'integer', 20, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 20,
             ));
        $this->hasColumn('lft', 'integer', 20, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 20,
             ));
        $this->hasColumn('rgt', 'integer', 20, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 20,
             ));
        $this->hasColumn('level', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('token', 'string', 255, array(
             'type' => 'string',
             'unique' => true,
             'notnull' => true,
             'notblank' => true,
             'length' => 255,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'notblank' => true,
             'length' => 255,
             ));
        $this->hasColumn('type', 'set', 10, array(
             'type' => 'set',
             'length' => 10,
             'values' => 
             array(
              0 => 'country',
              1 => 'area',
              2 => 'city',
             ),
             'notnull' => true,
             'default' => 'city',
             'comment' => 'Тип региона: страна, административная единица, город',
             ));
        $this->hasColumn('is_default', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             'comment' => 'Регион по-умолчанию?',
             ));

        $this->option('comment', 'Регион');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('ProductPriceList as PriceList', array(
             'local' => 'product_price_list_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Stock', array(
             'local' => 'stock_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('ServicePrice', array(
             'local' => 'id',
             'foreign' => 'region_id'));

        $this->hasMany('ServiceCenter', array(
             'local' => 'id',
             'foreign' => 'region_id'));

        $this->hasMany('User', array(
             'local' => 'id',
             'foreign' => 'region_id'));

        $this->hasMany('UserAddress', array(
             'local' => 'id',
             'foreign' => 'city_id'));

        $nestedset0 = new Doctrine_Template_NestedSet(array(
             'hasManyRoots' => true,
             'rootColumnName' => 'root_id',
             ));
        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($nestedset0);
        $this->actAs($timestampable0);
    }
}