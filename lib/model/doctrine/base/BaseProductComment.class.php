<?php

/**
 * BaseProductComment
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $core_id
 * @property integer $product_id
 * @property integer $lft
 * @property integer $rgt
 * @property integer $level
 * @property integer $user_id
 * @property string $content
 * @property integer $helpful
 * @property integer $unhelpful
 * @property Product $Product
 * @property User $User
 * 
 * @method integer        getId()         Returns the current record's "id" value
 * @method integer        getCoreId()     Returns the current record's "core_id" value
 * @method integer        getProductId()  Returns the current record's "product_id" value
 * @method integer        getLft()        Returns the current record's "lft" value
 * @method integer        getRgt()        Returns the current record's "rgt" value
 * @method integer        getLevel()      Returns the current record's "level" value
 * @method integer        getUserId()     Returns the current record's "user_id" value
 * @method string         getContent()    Returns the current record's "content" value
 * @method integer        getHelpful()    Returns the current record's "helpful" value
 * @method integer        getUnhelpful()  Returns the current record's "unhelpful" value
 * @method Product        getProduct()    Returns the current record's "Product" value
 * @method User           getUser()       Returns the current record's "User" value
 * @method ProductComment setId()         Sets the current record's "id" value
 * @method ProductComment setCoreId()     Sets the current record's "core_id" value
 * @method ProductComment setProductId()  Sets the current record's "product_id" value
 * @method ProductComment setLft()        Sets the current record's "lft" value
 * @method ProductComment setRgt()        Sets the current record's "rgt" value
 * @method ProductComment setLevel()      Sets the current record's "level" value
 * @method ProductComment setUserId()     Sets the current record's "user_id" value
 * @method ProductComment setContent()    Sets the current record's "content" value
 * @method ProductComment setHelpful()    Sets the current record's "helpful" value
 * @method ProductComment setUnhelpful()  Sets the current record's "unhelpful" value
 * @method ProductComment setProduct()    Sets the current record's "Product" value
 * @method ProductComment setUser()       Sets the current record's "User" value
 * 
 * @package    enter
 * @subpackage model
 * @author     Связной Маркет
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseProductComment extends myDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('product_comment');
        $this->hasColumn('id', 'integer', 20, array(
             'type' => 'integer',
             'autoincrement' => true,
             'primary' => true,
             'length' => 20,
             ));
        $this->hasColumn('core_id', 'integer', 20, array(
             'type' => 'integer',
             'notnull' => false,
             'comment' => 'ид записи в Core',
             'length' => 20,
             ));
        $this->hasColumn('product_id', 'integer', 20, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 20,
             ));
        $this->hasColumn('lft', 'integer', 20, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 20,
             ));
        $this->hasColumn('rgt', 'integer', 20, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 20,
             ));
        $this->hasColumn('level', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('user_id', 'integer', 20, array(
             'type' => 'integer',
             'notnull' => false,
             'length' => 20,
             ));
        $this->hasColumn('content', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'notblank' => true,
             'comment' => 'Текст комментария',
             'length' => 255,
             ));
        $this->hasColumn('helpful', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             'comment' => 'Количество полезных оценок отзыва',
             'length' => 4,
             ));
        $this->hasColumn('unhelpful', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             'comment' => 'Количество бесполезных оценок отзыва',
             'length' => 4,
             ));

        $this->option('comment', 'Комментарии товара');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Product', array(
             'local' => 'product_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('User', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $nestedset0 = new Doctrine_Template_NestedSet(array(
             'hasManyRoots' => true,
             'rootColumnName' => 'product_id',
             ));
        $this->actAs($timestampable0);
        $this->actAs($nestedset0);
    }
}