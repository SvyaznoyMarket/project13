<?php

/**
 * BaseProduct
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $token
 * @property string $name
 * @property integer $type_id
 * @property integer $creator_id
 * @property integer $category_id
 * @property boolean $view_show
 * @property boolean $view_list
 * @property boolean $is_instock
 * @property text $description
 * @property decimal $rating
 * @property decimal $price
 * @property ProductType $Type
 * @property Creator $Creator
 * @property ProductCategory $Category
 * @property Doctrine_Collection $News
 * @property Doctrine_Collection $NewsRelation
 * @property Doctrine_Collection $OrderRelation
 * @property Doctrine_Collection $PropertyRelation
 * @property Doctrine_Collection $Photo
 * @property Doctrine_Collection $Comment
 * @property Doctrine_Collection $SlaveSimilarProduct
 * @property Doctrine_Collection $MasterSimilarProduct
 * @property Doctrine_Collection $SlaveAccessoryProduct
 * @property Doctrine_Collection $MasterAccessoryProduct
 * @property Doctrine_Collection $StockRelation
 * @property Doctrine_Collection $TagRelation
 * @property Doctrine_Collection $UserTagRelation
 * @property Doctrine_Collection $UserDelayedProduct
 * @property Doctrine_Collection $UserNotice
 * 
 * @method integer             getId()                     Returns the current record's "id" value
 * @method string              getToken()                  Returns the current record's "token" value
 * @method string              getName()                   Returns the current record's "name" value
 * @method integer             getTypeId()                 Returns the current record's "type_id" value
 * @method integer             getCreatorId()              Returns the current record's "creator_id" value
 * @method integer             getCategoryId()             Returns the current record's "category_id" value
 * @method boolean             getViewShow()               Returns the current record's "view_show" value
 * @method boolean             getViewList()               Returns the current record's "view_list" value
 * @method boolean             getIsInstock()              Returns the current record's "is_instock" value
 * @method text                getDescription()            Returns the current record's "description" value
 * @method decimal             getRating()                 Returns the current record's "rating" value
 * @method decimal             getPrice()                  Returns the current record's "price" value
 * @method ProductType         getType()                   Returns the current record's "Type" value
 * @method Creator             getCreator()                Returns the current record's "Creator" value
 * @method ProductCategory     getCategory()               Returns the current record's "Category" value
 * @method Doctrine_Collection getNews()                   Returns the current record's "News" collection
 * @method Doctrine_Collection getNewsRelation()           Returns the current record's "NewsRelation" collection
 * @method Doctrine_Collection getOrderRelation()          Returns the current record's "OrderRelation" collection
 * @method Doctrine_Collection getPropertyRelation()       Returns the current record's "PropertyRelation" collection
 * @method Doctrine_Collection getPhoto()                  Returns the current record's "Photo" collection
 * @method Doctrine_Collection getComment()                Returns the current record's "Comment" collection
 * @method Doctrine_Collection getSlaveSimilarProduct()    Returns the current record's "SlaveSimilarProduct" collection
 * @method Doctrine_Collection getMasterSimilarProduct()   Returns the current record's "MasterSimilarProduct" collection
 * @method Doctrine_Collection getSlaveAccessoryProduct()  Returns the current record's "SlaveAccessoryProduct" collection
 * @method Doctrine_Collection getMasterAccessoryProduct() Returns the current record's "MasterAccessoryProduct" collection
 * @method Doctrine_Collection getStockRelation()          Returns the current record's "StockRelation" collection
 * @method Doctrine_Collection getTagRelation()            Returns the current record's "TagRelation" collection
 * @method Doctrine_Collection getUserTagRelation()        Returns the current record's "UserTagRelation" collection
 * @method Doctrine_Collection getUserDelayedProduct()     Returns the current record's "UserDelayedProduct" collection
 * @method Doctrine_Collection getUserNotice()             Returns the current record's "UserNotice" collection
 * @method Product             setId()                     Sets the current record's "id" value
 * @method Product             setToken()                  Sets the current record's "token" value
 * @method Product             setName()                   Sets the current record's "name" value
 * @method Product             setTypeId()                 Sets the current record's "type_id" value
 * @method Product             setCreatorId()              Sets the current record's "creator_id" value
 * @method Product             setCategoryId()             Sets the current record's "category_id" value
 * @method Product             setViewShow()               Sets the current record's "view_show" value
 * @method Product             setViewList()               Sets the current record's "view_list" value
 * @method Product             setIsInstock()              Sets the current record's "is_instock" value
 * @method Product             setDescription()            Sets the current record's "description" value
 * @method Product             setRating()                 Sets the current record's "rating" value
 * @method Product             setPrice()                  Sets the current record's "price" value
 * @method Product             setType()                   Sets the current record's "Type" value
 * @method Product             setCreator()                Sets the current record's "Creator" value
 * @method Product             setCategory()               Sets the current record's "Category" value
 * @method Product             setNews()                   Sets the current record's "News" collection
 * @method Product             setNewsRelation()           Sets the current record's "NewsRelation" collection
 * @method Product             setOrderRelation()          Sets the current record's "OrderRelation" collection
 * @method Product             setPropertyRelation()       Sets the current record's "PropertyRelation" collection
 * @method Product             setPhoto()                  Sets the current record's "Photo" collection
 * @method Product             setComment()                Sets the current record's "Comment" collection
 * @method Product             setSlaveSimilarProduct()    Sets the current record's "SlaveSimilarProduct" collection
 * @method Product             setMasterSimilarProduct()   Sets the current record's "MasterSimilarProduct" collection
 * @method Product             setSlaveAccessoryProduct()  Sets the current record's "SlaveAccessoryProduct" collection
 * @method Product             setMasterAccessoryProduct() Sets the current record's "MasterAccessoryProduct" collection
 * @method Product             setStockRelation()          Sets the current record's "StockRelation" collection
 * @method Product             setTagRelation()            Sets the current record's "TagRelation" collection
 * @method Product             setUserTagRelation()        Sets the current record's "UserTagRelation" collection
 * @method Product             setUserDelayedProduct()     Sets the current record's "UserDelayedProduct" collection
 * @method Product             setUserNotice()             Sets the current record's "UserNotice" collection
 * 
 * @package    enter
 * @subpackage model
 * @author     Связной Маркет
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseProduct extends myDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('product');
        $this->hasColumn('id', 'integer', 20, array(
             'type' => 'integer',
             'autoincrement' => true,
             'primary' => true,
             'length' => 20,
             ));
        $this->hasColumn('token', 'string', 255, array(
             'type' => 'string',
             'unique' => true,
             'notnull' => true,
             'notblank' => true,
             'length' => 255,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'notblank' => true,
             'length' => 255,
             ));
        $this->hasColumn('type_id', 'integer', 20, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 20,
             ));
        $this->hasColumn('creator_id', 'integer', 20, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 20,
             ));
        $this->hasColumn('category_id', 'integer', 20, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 20,
             ));
        $this->hasColumn('view_show', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             'comment' => 'Показывать товар по прямой ссылке?',
             ));
        $this->hasColumn('view_list', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             'comment' => 'Показывать товар в списке категорий?',
             ));
        $this->hasColumn('is_instock', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));
        $this->hasColumn('description', 'text', null, array(
             'type' => 'text',
             'notnull' => false,
             'comment' => 'Описание товара',
             ));
        $this->hasColumn('rating', 'decimal', 18, array(
             'type' => 'decimal',
             'notnull' => true,
             'default' => 0,
             'comment' => 'Рейтинг товара',
             'length' => 18,
             'scale' => '14',
             ));
        $this->hasColumn('price', 'decimal', 12, array(
             'type' => 'decimal',
             'notnull' => true,
             'default' => 0,
             'comment' => 'Цена товара',
             'length' => 12,
             'scale' => '2',
             ));

        $this->option('comment', 'Товар');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('ProductType as Type', array(
             'local' => 'type_id',
             'foreign' => 'id',
             'onDelete' => 'RESTRICT'));

        $this->hasOne('Creator', array(
             'local' => 'creator_id',
             'foreign' => 'id',
             'onDelete' => 'RESTRICT'));

        $this->hasOne('ProductCategory as Category', array(
             'local' => 'category_id',
             'foreign' => 'id',
             'onDelete' => 'RESTRICT'));

        $this->hasMany('News', array(
             'refClass' => 'NewsProductRelation',
             'local' => 'product_id',
             'foreign' => 'news_id'));

        $this->hasMany('NewsProductRelation as NewsRelation', array(
             'local' => 'id',
             'foreign' => 'product_id'));

        $this->hasMany('OrderProductRelation as OrderRelation', array(
             'local' => 'id',
             'foreign' => 'product_id'));

        $this->hasMany('ProductPropertyRelation as PropertyRelation', array(
             'local' => 'id',
             'foreign' => 'product_id'));

        $this->hasMany('ProductPhoto as Photo', array(
             'local' => 'id',
             'foreign' => 'product_id'));

        $this->hasMany('ProductComment as Comment', array(
             'local' => 'id',
             'foreign' => 'product_id'));

        $this->hasMany('SimilarProduct as SlaveSimilarProduct', array(
             'local' => 'id',
             'foreign' => 'master_id'));

        $this->hasMany('SimilarProduct as MasterSimilarProduct', array(
             'local' => 'id',
             'foreign' => 'slave_id'));

        $this->hasMany('AccessoryProduct as SlaveAccessoryProduct', array(
             'local' => 'id',
             'foreign' => 'master_id'));

        $this->hasMany('AccessoryProduct as MasterAccessoryProduct', array(
             'local' => 'id',
             'foreign' => 'slave_id'));

        $this->hasMany('StockProductRelation as StockRelation', array(
             'local' => 'id',
             'foreign' => 'product_id'));

        $this->hasMany('TagProductRelation as TagRelation', array(
             'local' => 'id',
             'foreign' => 'product_id'));

        $this->hasMany('UserTagProductRelation as UserTagRelation', array(
             'local' => 'id',
             'foreign' => 'product_id'));

        $this->hasMany('UserDelayedProduct', array(
             'local' => 'id',
             'foreign' => 'product_id'));

        $this->hasMany('UserProductNotice as UserNotice', array(
             'local' => 'id',
             'foreign' => 'product_id'));

    $this->addListener(new ProductListener(array()), 'ProductListener');
    }
}