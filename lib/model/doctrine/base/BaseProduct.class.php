<?php

/**
 * BaseProduct
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property integer $category_id
 * @property ProductCategory $Category
 * @property Doctrine_Collection $Property
 * @property Doctrine_Collection $Photo
 * 
 * @method integer             getId()          Returns the current record's "id" value
 * @method string              getName()        Returns the current record's "name" value
 * @method integer             getCategoryId()  Returns the current record's "category_id" value
 * @method ProductCategory     getCategory()    Returns the current record's "Category" value
 * @method Doctrine_Collection getProperty()    Returns the current record's "Property" collection
 * @method Doctrine_Collection getPhoto()       Returns the current record's "Photo" collection
 * @method Product             setId()          Sets the current record's "id" value
 * @method Product             setName()        Sets the current record's "name" value
 * @method Product             setCategoryId()  Sets the current record's "category_id" value
 * @method Product             setCategory()    Sets the current record's "Category" value
 * @method Product             setProperty()    Sets the current record's "Property" collection
 * @method Product             setPhoto()       Sets the current record's "Photo" collection
 * 
 * @package    enter
 * @subpackage model
 * @author     Связной Маркет
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseProduct extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('product');
        $this->hasColumn('id', 'integer', 20, array(
             'type' => 'integer',
             'autoincrement' => true,
             'primary' => true,
             'length' => 20,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'notblank' => true,
             'length' => 255,
             ));
        $this->hasColumn('category_id', 'integer', 20, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 20,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('ProductCategory as Category', array(
             'local' => 'category_id',
             'foreign' => 'id',
             'onDelete' => 'RESTRICT'));

        $this->hasMany('ProductProperty as Property', array(
             'local' => 'id',
             'foreign' => 'product_id'));

        $this->hasMany('ProductPhoto as Photo', array(
             'local' => 'id',
             'foreign' => 'product_id'));
    }
}