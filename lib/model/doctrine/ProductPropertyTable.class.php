<?php

/**
 * ProductPropertyTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ProductPropertyTable extends myDoctrineTable
{

  /**
   * Returns an instance of this class.
   *
   * @return object ProductPropertyTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('ProductProperty');
  }

  public function getQueryRootAlias()
  {
    return 'productProperty';
  }

  public function getDefaultParameters()
  {
    return array(
      'hydrate_array'  => false,
    );
  }

  public function getCoreMapping()
  {
    return array(
      'id'          => 'core_id',
      'name'        => 'name',
      'unit'        => 'unit',
      'is_multiple' => 'is_multiple',
      'hint'        => 'hint',
    );
  }

  public function getRecordById($id, array $params = array())
  {
    $this->applyDefaultParameters($params, array(
      'with_options' => false,
    ));

    $q = $this->createBaseQuery($params);

    $this->setQueryParameters($q);

    $q->whereId($id);

    if ($params['with_options'])
    {
      $q->leftJoin('productProperty.Option productPropertyOption')
        ->addOrderBy('productPropertyOption.position')
      ;
    }

    if ($params['hydrate_array'])
    {
      $q->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);
    }

    $list = $q->execute();

    return $this->getResult($list, is_scalar($id));
  }

/**
  * @return array Properties
  */
  public function getForFilter(ProductCategory $category = null)
  {
    $return = $this->createList();

    if (!$category)
    {
      return false;
    }

    $key = $this->getQueryHash('productCategory-'.$category['id'].'/productProperty-all', array($category['id']));

    $return = $this->getCachedByKey($key);
    if (true || !$return)
    {
      //т.к. фильтры пока используются только для категорый без подкатегорий, сэкономим один запрос :)
      //$categoryIds = ProductCategoryTable::getInstance()->getDescendatIds($category);
      $categoryIds = array($category['id']);

      //трехэтажный запрос, конечно, ниочень, но лучше не получилось.
      //можно попобовать оптимизтровать
      $q = $this->createBaseQuery();
      $q->select('productProperty.*, option.*')
        ->innerJoin('productProperty.ProductRelation productRelation INDEXBY id')
        //->innerJoin('productRelation.Product product')
        ->innerJoin('productRelation.Product product WITH product.view_list = ?', 1)
        ->innerJoin('productRelation.Option relationOption')
        ->innerJoin('product.CategoryRelation categoryRelation')
        ->innerJoin('productProperty.Option option WITH option.id = relationOption.id')
        ->andWhere('productRelation.option_id IS NOT NULL')
        ->andWhereIn('categoryRelation.product_category_id', $categoryIds)
        ->groupBy('productRelation.option_id')
        ->orderBy('count(productRelation.product_id) DESC')
        //->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
      ;

      $return = $q->execute();
      if (false && $this->isCacheEnabled())
      {
        $this->getCache()->set($key, $return, 86400); // обновление кеша через 24 часа
      }
    }

    return $return;
  }
}