<?php

/**
 * BannerTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class BannerTable extends myDoctrineTable
{

  /**
   * Returns an instance of this class.
   *
   * @return object BannerTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('Banner');
  }

  public function getCoreMapping()
  {
    return array(
      'id'          => 'core_id',
      'name'        => 'name',
      'is_active'   => 'is_active',
      'is_dummy'    => 'is_dummy',
      'media_image' => 'image',
      'start'       => 'start_at',
      'finish'      => 'end_at',
      'position'    => 'position',
      //'timeout'     => 'timeout',
    );
  }

  public function getDefaultParameters()
  {
    $data =  array(
      'hydrate_array' => false,
    );

    return $data;
  }

  public function createBaseQuery(array $params = array())
  {
    $this->applyDefaultParameters($params);

    $q = $this->createQuery('banner');

    $q->where('banner.is_active = ? AND banner.is_dummy = ?', array(true, false));
    $q->addWhere('NOW() BETWEEN banner.start_at AND banner.end_at');

    $q->orderBy('position ASC');

    return $q;
  }

  public function getRecordById($id, array $params = array())
  {
    $this->applyDefaultParameters($params, array(
      'with_items' => true,
    ));

    $q = $this->createBaseQuery($params);

    if ($params['with_items'])
    {
      $q->leftJoin('banner.Item bannerItem');
    }

    $this->setQueryParameters($q, $params);
    $q->addWhere('banner.id = ?', $id);

    if ($params['hydrate_array'])
    {
      $q->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);
    }
    $record = $q->fetchOne();
    if (!$record)
    {
      return $record;
    }

    if ($params['with_items'])
    {
      foreach ($record['Item'] as $i => $bannerItem)
      {
        $bannerItem['Object'] = null;
        if ('product' == $bannerItem['type'])
        {
          $product = ProductTable::getInstance()->getById($bannerItem['object_id'], array('hydrate_array' => true, 'with_model' => true));
          if ($product && $product['view_list'])
          {
            $bannerItem['Object'] = $product;
          }
        }

        if (is_array($bannerItem))
        {
          $record['Item'][$i] = $bannerItem;
        }
      }
    }

    return $record;
  }

  public function getList(array $params = array())
  {
    $q = $this->createBaseQuery($params);
    $this->setQueryParameters($q, $params);

    $ids = $this->getIdsByQuery($q);

    if (!count($ids))
    {
      $q = $this->createQuery()
        ->where('banner.is_active = ? AND banner.is_dummy = ?', array(true, true))
        ->orderBy('position ASC')
      ;

      $ids = $this->getIdsByQuery($q);
    }

    return $this->createListByIds($ids, $params);
  }

  public function getListBySlot(Slot $slot, array $params = array())
  {
    $this->applyDefaultParameters($params);

    $q = $this->createBaseQuery($params);

    $q->addWhere('banner.slot_id = ?', $slot->id)
      ->orderBy('banner.position')
    ;

    $this->setQueryParameters($q, $params);

    $ids = $this->getIdsByQuery($q);

    return $this->createListByIds($ids, $params);
  }

  public function getImageUrl($record, $view = 0)
  {
    $urls = sfConfig::get('app_banner_image_url');

    return $record['image'] ? $urls[$view].$record['image'] : null;
  }

  public function getCacheTags($record)
  {
    $tags = array();
    if (!empty($record['id']))
    {
      $tags[] = "banner-{$record['id']}";

      foreach ($record['Item'] as $bannerItem)
      {
        $tags[] = "{$bannerItem['type']}-{$bannerItem['object_id']}";
      }
    }

    return $tags;
  }
}