<?php

/**
 * ProductPriceTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ProductPriceTable extends myDoctrineTable
{
  /**
   * Returns an instance of this class.
   *
   * @return object ProductPriceTable
   */
  public static function getInstance()
  {
      return Doctrine_Core::getTable('ProductPrice');
  }

  public function getDefaultParameters()
  {
    return array(
      'hydrate_array' => false,
    );
  }

  public function getDefaultByProductId($product_id, array $params = array())
  {
    $return = false;

    $this->applyDefaultParameters($params);

    $key = $this->getQueryHash('product-'.$product_id.'/productPrice-default', $params);

    $return = $this->getCachedByKey($key);
    if (!$return)
    {
      $q = $this->createBaseQuery($params);

      $q->select('productPrice.*');

      $q->innerJoin('productPrice.PriceList priceList');

      $q->addWhere('productPrice.product_id = ?', $product_id);
      $q->addWhere('priceList.is_default = ?', 1);

      if ($params['hydrate_array'])
      {
        $q->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);
      }

      $return = $q->fetchOne();
      if ($this->isCacheEnabled())
      {
        $this->getCache()->set($key, $return);
        $this->getCache()->addTag("product-{$product_id}", $key);
      }
    }

    return $return;
  }

  public function getByProductId($product_id, array $params = array())
  {
    $this->applyDefaultParameters($params);

    $q = $this->createBaseQuery($params);

    $q->select('productPrice.*');

    $q->innerJoin('productPrice.PriceList priceList')
      ->innerJoin('priceList.Region region WITH region.core_id = ?', sfContext::getInstance()->getUser()->getRegion('id'));

    $q->addWhere('productPrice.product_id = ?', $product_id);
    //$q->addWhere('priceList.is_default = ?', 1);

    $result = $q->fetchOne();

    if (!$result)
    {
      $result = $this->getDefaultByProductId($product_id);
    }

    return $result;
  }

  public function getCoreMapping()
  {
    return array(
      'id'            => 'core_id',
      'price'         => 'price',
      'price_old'     => 'old_price',
      'price_average' => 'avg_price',

      'product_id'    => array('rel' => 'Product'),
      'price_list_id' => array('rel' => 'PriceList'),
    );
  }

  public function getCacheEraserKeys($record, $action = null)
  {
    $return = array();
    $intersection = array();

    if ($record instanceof myDoctrineRecord)
    {
      // for preSave
      $modified = array_keys($record->getModified()); // if postSave, then $modified = array_keys($record->getLastModified());
      // Массив полей, изменения в которых ведут к генерации кеш-ключей
      $intersection = array_intersect($modified, array(
        'price',
      ));
    }

    if (count($intersection))
    {
      $q = ProductTable::getInstance()->createQuery('product')
        ->innerJoin('product.Category category')
        ->where('product.id = ?', $record['product_id'])
        ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
      ;

      $products = $q->execute();

      foreach ($products as $product)
      {
        $return['p-'.$product['core_id']] = "product-{$product['core_id']}";

        foreach ($product['Category'] as $category)
        {
          $return['c-'.$category['core_id']] = "productCategory-{$category['core_id']}";
        }
//        var_dump($return); die();
      }
    }

    return array_values($return);
  }

  public function getCacheTags($record)
  {
    $tags = array();
    if (!empty($record['product_id']))
    {
      $tags[] = "product-{$record['product_id']}";
    }

    return $tags;
  }
}