<?php

/**
 * ProductPriceTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ProductPriceTable extends myDoctrineTable
{
  /**
   * Returns an instance of this class.
   *
   * @return object ProductPriceTable
   */
  public static function getInstance()
  {
      return Doctrine_Core::getTable('ProductPrice');
  }

  public function getDefaultByProductId($product_id, array $params = array())
  {
    $this->applyDefaultParameters($params);

    $q = $this->createBaseQuery($params);

    $q->innerJoin('productPrice.PriceList priceList');

    $q->addWhere('productPrice.product_id = ?', $product_id);
    $q->addWhere('priceList.is_default = ?', 1);

    $q->useResultCache(true, null, $this->getRecordQueryHash($product_id, $params));

    $result = $q->fetchOne();

    return $result;
  }

  public function getByProductId($product_id, array $params = array())
  {
    $this->applyDefaultParameters($params);

    $q = $this->createBaseQuery($params);

    $q->innerJoin('productPrice.PriceList priceList')
      ->innerJoin('priceList.Region region WITH region.id = ?', sfContext::getInstance()->getUser()->getRegion('id'));

    $q->addWhere('productPrice.product_id = ?', $product_id);
    //$q->addWhere('priceList.is_default = ?', 1);

    $q->useResultCache(true, null, $this->getRecordQueryHash($product_id, $params));

    $result = $q->fetchOne();

    if (!$result)
    {
      $result = $this->getDefaultByProductId($product_id);
    }

    return $result;
  }

  public function getCoreMapping()
  {
    return array(
      'id'            => 'core_id',
      'price'         => 'price',
      'price_old'     => 'old_price',
      'price_average' => 'avg_price',

      'product_id'    => array('rel' => 'Product'),
      'price_list_id' => array('rel' => 'PriceList'),
    );
  }

  public function getCacheEraserKeys($record, $action = null)
  {
    $return = array();

    $q = ProductTable::getInstance()->createQuery('product')
      ->select('product.core_id, region.geoip_code, productPrice.id, priceList.id')
      ->innerJoin('product.ProductPrice productPrice')
      ->innerJoin('productPrice.PriceList priceList')
      ->innerJoin('priceList.Region region')
      ->where('productPrice.id = ?', $record['id'])
      ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
    ;

    $products = $q->execute();

    foreach ($products as $product)
    {
      foreach ($product['ProductPrice'][0]['PriceList']['Region'] as $region)
      {
        if (!empty($region['geoip_code']))
        {
          $return[] = "product-{$product['core_id']}-{$region['geoip_code']}";
        }
      }
    }

    return $return;
  }
}