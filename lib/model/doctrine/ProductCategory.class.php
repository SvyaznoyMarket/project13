<?php

/**
 * ProductCategory
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    enter
 * @subpackage model
 * @author     Связной Маркет
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ProductCategory extends BaseProductCategory
{

  public function __toString()
  {
    return (string) $this->name;
  }

  public function toParams()
  {
    return array(
      'productCategory' => $this->token,
    );
  }

  public function countProduct()
  {
    return ProductTable::getInstance()->countByCategory($this);
  }

  public function getPreviewProduct()
  {
    return ProductTable::getInstance()->getByCategory($this);
  }

  public function getSubCategories()
  {
    return ProductCategoryTable::getInstance()->getSubList(array('root_id' => $this->root_id));
  }
/**
 *
 * @return TagGroup Collection
 */
  public function getTagGroupForFilter()
  {
    //делаем список тэгов без учета тегов без товаров
    $categoryTable = ProductCategoryTable::getInstance();

    //берем только тэги, у которых есть продукты
    $tagIds = $categoryTable->getTagIds($this);

    //формируем новую коллекцию групп тегов только с рабочими тэгами
    $newTagGroup = TagGroupTable::getInstance()->createList();

    foreach ($this->getTagGroup() as $tagGroup)
    {
      $tags = TagTable::getInstance()->createList();
      foreach ($tagGroup->getTag() as $tag)
      {
        if (in_array($tag->id, $tagIds))
        {
          $tags[] = clone $tag;
        }
      }
      if (count($tags))
      {
        $tag_group = new TagGroup();
        $tag_group->fromArray($tagGroup->toArray(true));
        $tag_group['Tag'] = $tags;
        $newTagGroup[] = $tag_group;
      }
    }

    return $newTagGroup;
  }
/**
 *
 * @return FilterGroup Collection
 */
  public function getFilterGroupForFilter()
  {
    //делаем список тэгов без учета тегов без товаров
    $categoryTable = ProductCategoryTable::getInstance();

    //берем property_id и option_id, которые существуют в этой категории
    $properties = ProductPropertyTable::getInstance()->getForFilter($this);

    //формируем новую коллекцию групп тегов только с рабочими тэгами
    $newFilter = ProductFilterTable::getInstance()->createList();

    foreach ($this->FilterGroup->Filter as $filter)
    {
      $options = ProductPropertyOptionTable::getInstance()->createList();
      foreach ($filter->Property->Option as $option)
      {
        if (in_array($filter->property_id, array_keys($properties)) && in_array($option, $properties[$filter->property_id]))
        {
          $options[] = clone $option;
        }
      }
      if (count($options))
      {
        $productProperty = new ProductProperty();
        $productProperty->fromArray($filter->Property->toArray(true));
        $productProperty['Option'] = $options;
        $filter['Property'] = $productProperty;
        $newFilter[] = $filter;
      }
    }

    return $newFilter;
  }

  public function getDescendantIds()
  {

    return $this->getTable()->getDescendatIds($this);

  }
}
