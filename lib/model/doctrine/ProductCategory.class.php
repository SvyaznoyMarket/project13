<?php

/**
 * ProductCategory
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    enter
 * @subpackage model
 * @author     Связной Маркет
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ProductCategory extends BaseProductCategory
{

  public function __toString()
  {
    return (string) $this->name;
  }

  public function toParams()
  {
    return array(
      'productCategory' => $this->token,
    );
  }

  public function getRootCategory(array $params = array())
  {
	  if ($this->level == 0)
    {
		  return $this;
	  }

	  $q = $this->getTable()->createBaseQuery();

	  $q->andWhere('productCategory.root_id = ?', $this->root_id)
	    ->andWhere('productCategory.level = ?', 0)
    ;

    $q->useResultCache(true, null, $this->getTable()->getQueryHash('productCategory-root-'.$this->root_id, $params));

	  return $q->fetchOne();
  }

  public function importFromCore(array $data)
  {
    parent::importFromCore($data);

    $this->photo = !empty($data['media_image']) ? $data['media_image'] : 'default.jpg';
    $this->token = empty($this->token) ? (uniqid().'-'.myToolkit::urlize($this->name)) : $this->token;

  }

  public function countProduct(array $params = array())
  {
    return ProductTable::getInstance()->countByCategory($this, $params);
  }

  public function getPreviewProduct()
  {
    return ProductTable::getInstance()->getByCategory($this);
  }

  public function getSubCategories()
  {
    return ProductCategoryTable::getInstance()->getSubList(array('root_id' => $this->root_id));
  }

  public function getChildList(array $params = array())
  {
    return ProductCategoryTable::getInstance()->getChildList($this, $params);
  }

  public function getLinkList(array $params = array())
  {
    return ProductCategoryLinkTable::getInstance()->getListByCategory($this, $params);
  }
/**
 *
 * @return TagGroup Collection
 */
  public function getTagGroupForFilter()
  {
    //делаем список тэгов без учета тегов без товаров
    $categoryTable = ProductCategoryTable::getInstance();

    //берем только тэги, у которых есть продукты
    $tagIds = $categoryTable->getTagIds($this);

    if (!is_array($tagIds))
    {
      $tagIds = array($tagIds);
    }

    //возвращаем тэги, отсортированные в правильном порядке
    return $this->getTagGroupByIdWithOrder($tagIds);
  }
/**
 *
 * @return FilterGroup Collection
 */
  public function getFilterGroupForFilter()
  {
    //делаем список тэгов без учета тегов без товаров
    $categoryTable = ProductCategoryTable::getInstance();

    //берем property_id и option_id, которые существуют в этой категории
    $properties = ProductPropertyTable::getInstance()->getForFilter($this);

    //формируем новую коллекцию групп тегов только с рабочими тэгами
    $newFilter = ProductFilterTable::getInstance()->createList();

    $propertyIds = array();
    foreach ($properties as $key => $property)
    {
      $propertyIds[$property['id']] = $key;
    }

    foreach ($this->FilterGroup->getFilterList(array('order' => 'productFilter.name')) as $filter)
    {
      if (false
        || (('choice' == $filter->type) && isset($propertyIds[$filter->property_id]))
        || ('choice' != $filter->type)
      ) {
        if (isset($propertyIds[$filter->property_id]))
        {
          $filter['Property'] = $properties[$propertyIds[$filter->property_id]];
        }

        $newFilter[] = $filter;
      }
    }

    return $newFilter;
  }

  public function getDescendantIds(array $params = array())
  {
    return $this->getTable()->getDescendatIds($this, $params);
  }


  // TODO: удалить, роутинг для чего нужен?
  public function getUrl(){
      return '/catalog/' . $this->token;
  }

  public function getTagGroupByIdWithOrder(array $ids = array())
  {
    if (!count($ids))
    {
      return array();
    }

    $q = TagGroupTable::getInstance()->createBaseQuery();
    $q->innerJoin('tagGroup.ProductCategory productCategory WITH productCategory.id = ?', $this->id)
      ->innerJoin('tagGroup.Tag tag')
      ->andWhereIn('tag.id', $ids)
      ->orderBy('tagGroup.position, FIELD(tag.id, '.implode(',', $ids).')')
    ;

    return  $q->execute();
  }

  public function getPhotoUrl($view = 0)
  {
    $urls = sfConfig::get('app_category_photo_url');

    return $this->getPhoto() ? $urls[$view].$this->getPhoto() : null;
  }

  public function getVariation()
  {
    $variation = mb_strtolower($this->name, 'utf-8');
    switch ($variation)
    {
      case 'мебель':
        $variation = 'мебели';
        break;
      case 'бытовая техника':
        $variation = 'бытовой технике';
        break;
      case 'товары для дома':
        $variation = 'товарах для дома';
        break;
      case 'товары для детей':
        $variation = 'товарах для детей';
        break;
      case 'сделай сам (инструменты)':
        $variation = 'сделай сам (инструменты)';
        break;
      case 'электроника':
        $variation = 'электронике';
        break;
      case 'украшения и часы':
        $variation = 'украшениях и часах';
        break;
      case 'спорт':
        $variation = 'спорте';
        break;
      case 'подарки':
        $variation = 'подарках';
        break;
    }

    return $variation;
  }

}
