<?php

/**
 * Product
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    enter
 * @subpackage model
 * @author     Связной Маркет
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Product extends BaseProduct
{
	protected $_mainPhoto = null;

	public function construct()
  {
    $this->mapValue('Parameter', new myDoctrineVirtualCollection());
    $this->mapValue('ParameterGroup', new myDoctrineVirtualCollection());
  }

  public function preSave($event)
  {
    parent::preSave($event); // important!

    $record = $event->getInvoker();

    if (empty($record->token))
    {
      $record->token = !empty($record->barcode) ? trim($record->barcode) : uniqid();
    }
  }

  public function __toString()
  {
    return (string) $this->name;
  }

  public function toParams()
  {
    return array(
      'product' => $this->token_prefix.'/'.$this->token,
    );
  }

  public function importFromCore(array $data)
  {
    parent::importFromCore($data);

    $link = trim(preg_replace('/^\/product/', '', $data['link']), '/');
    $v = explode('/', $link);
    $this->token = array_pop($v);
    $this->token_prefix = count($v) ? array_shift($v) : null;

    $this->view = 'default';
    if (isset($data['view_id'])) foreach (array(1 => 'default', 2 => 'kit') as $k => $v)
    {
      if ($data['view_id'] == $k)
      {
        $this->view = $v;
        break;
      }
    }

    // check if creator doesn't exist
    if (!empty($data['brand_id']) && empty($this->creator_id))
    {
      if (!$response = Core::getInstance()->getCreator($data['brand_id']))
      {
        throw new Exception('Can\'t create Creator ##'.$data['brand_id']);
      }

      $creator = new Creator();
      $creator->importFromCore($response);
      $creator->setCorePush(false);
      $creator->save();
    }

    // property relation
    if (!empty($data['property']))
    {
      $collectionData = array();
      foreach ($data['property'] as $relationData)
      {
        $property = ProductPropertyTable::getInstance()->getByCoreId($relationData['property_id']);
        if (!$property) continue;

        // checks multiple property
        if ($relationData['is_multiple'] && !empty($relationData['option']))
        {
          foreach ($relationData['option'] as $optionData)
          {
            $optionId = ProductPropertyOptionTable::getInstance()->getIdByCoreId($optionData['option_id']);

            if (!empty($optionData['option_id']) && !$optionId)
            {
              // force get option
            }

            $collectionData[$property->id.'-'.$optionId] = array(
              'property_id' => $property->id,
              'real_value'  => $optionId,
              'type'        => $property->type,
            );
          }
        }
        else {
          $optionId =
            'select' == $property->type
            ? ProductPropertyOptionTable::getInstance()->getIdByCoreId($relationData['option_id'])
            : null
          ;
          if (!empty($relationData['option_id']) && !$optionId)
          {
            throw new Exception('Can\'t find ProductPropertyOption with core_id = '.$relationData['option_id']);
          }

          $value = trim($relationData['value']);
          $value = $optionId ? $optionId : (!empty($value) ? $value : null);

          if (('integer' == $property->type) || 'float' == $property->type)
          {
            $value = str_replace(',', '.', $value);
            $value = preg_replace('/[^\d\.]/', '', $value); // fix for value "1 000"
          }

          $collectionData[$property->id.'-'.$optionId] = array(
            'property_id' => $property->id,
            'real_value'  => $value,
            'type'        => $property->type,
          );
        }
      }

      $existing = array();
      foreach ($this->PropertyRelation as $i => $propertyRelation)
      {
        $index = $propertyRelation->property_id.'-'.$propertyRelation->option_id;
        if (!array_key_exists($index, $collectionData))
        {
          $propertyRelation->delete();
          unset($this->PropertyRelation[$i]);
        }
        else {
          $propertyRelation->real_value = $collectionData[$index]['real_value'];
          $existing[] = $index; //!important
        }
      }

      // new relation
      $new = array_diff(array_keys($collectionData), $existing);
      foreach ($new as $index)
      {
        $relation = new ProductPropertyRelation();
        $relation->fromArray($collectionData[$index]);
        $this->PropertyRelation[] = $relation;
      }
    }

    if (empty($data['media_image']))
    {
      $this->main_photo = 'default.jpg';
    }

    if (isset($data['is_model']) && 1 == $data['is_model'])
    {
      $property_ids = array();
      foreach ($this->ProductModelPropertyRelation as $productModelPropertyRelation)
      {
        $property_ids[$productModelPropertyRelation['product_property_id']] = $productModelPropertyRelation['id'];
      }

      if (isset($data['property_model']) && count($data['property_model']))
      {
        foreach($data['property_model'] as $relationData)
        {
          if ($this->id)
          {
            $productProperty = ProductPropertyTable::getInstance()->getByCoreId($relationData['property_id']);
            $productModelPropertyRelation = ProductModelPropertyRelationTable::getInstance()->findOneByProductIdAndProductPropertyId($this->id, $productProperty->id);
          }
          if (!isset($productModelPropertyRelation) || empty($productModelPropertyRelation))
          {
            $productModelPropertyRelation = new ProductModelPropertyRelation();
          }
          $productModelPropertyRelation->importFromCore($relationData);
          $this->ProductModelPropertyRelation[] = $productModelPropertyRelation;
          unset($property_ids[$productModelPropertyRelation['product_property_id']]);
        }
      }

      //Удаляю все, что лишнее
      if (count($property_ids))
      {
        $q = Doctrine_Query::create()
          ->delete('ProductModelPropertyRelation')
          ->andWhereIn('id', array_values($property_ids))
        ;

        $deleted = $q->execute();
      }

    }

    if ($this->isKit())
    {
      $part_ids = array();
      foreach ($this->PartRelation as $partRelation)
      {
        $part_ids[$partRelation['part_id']] = $partRelation['id'];
      }

      if (isset($data['kit']) && count($data['kit']))
      {
        foreach($data['kit'] as $relationData)
        {
          $part = ProductTable::getInstance()->getByCoreId($relationData['id']);
          if (!$part) continue;
          if ($this->id)
          {
            $partRelation = ProductKitRelationTable::getInstance()->findOneByKitIdAndPartId($this->id, $part->id);
          }
          if (!isset($partRelation) || empty($partRelation))
          {
            $partRelation = new ProductKitRelation();
          }
          $partRelation->fromArray(
            array(
              'part_id' => $part->id,
            )
          );
          $this->PartRelation[] = $partRelation;
          unset($part_ids[$partRelation['part_id']]);
        }
      }

      //Удаляю все, что лишнее
      if (count($part_ids))
      {
        $q = Doctrine_Query::create()
          ->delete('ProductKitRelation')
          ->andWhereIn('id', array_values($part_ids))
        ;

        $deleted = $q->execute();
      }
    }

    //Временные правила для отображения товара!!!
    if (empty($data['media_image']))
    {
      $this->view_list = 0;
      $this->view_show = 1;
    }
    else
    {
      if (!empty($this->id))
      {
        $price = ProductPriceTable::getInstance()->getDefaultByProductId($this->id);
        $this->view_list = !empty($price) && $price->price > 0;
      }
      else
      {
        $this->view_list = 0;
      }
      $this->view_show = 1;
    }

    //Постоянные правила для отображения товара!!!
    /*if (!empty($data['status_id']))
    {
      switch ($data['status_id'])
      {
        case 1:
          $this->view_list = 1;
          $this->view_show = 1;
          $this->is_instock = 1;
          $this->Status = ProductStatusTable::getInstance()->findOneByToken('available');
        case 2:
          $this->view_list = 1;
          $this->view_show = 1;
          $this->is_instock = 0;
          $this->Status = ProductStatusTable::getInstance()->findOneByToken('available');
          break;
        default:
          $this->view_list = 0;
          $this->view_show = 0;
          $this->is_instock = 0;
          break;
      }
    }
    elseif (!empty($data['is_active']) && $data['is_active'])
    {
      $this->view_list = 1;
      $this->view_show = 1;
      $this->is_instock = 1;
    }
    else
    {
      $this->view_list = 0;
      $this->view_show = 0;
      $this->is_instock = 0;
    }*/

  }

  public function getIsInsale()
  {
    return $this->getTable()->isInsale($this);
  }

  public function getParameterByProperty($property_id)
  {
    $return = null;
    foreach ($this->Parameter as $parameter)
    {
      if ($parameter->getProperty()->id != $property_id) continue;

      $return = $parameter;
    }

    return $return;
  }
  public function getRealPrice()
  {
    return $this->getTable()->getRealPrice($this);
  }

  public function getFormattedPrice()
  {
    return $this->getTable()->getFormattedPrice($this);
  }

  public function getSimilarProduct(array $params = array())
  {
    return SimilarProductTable::getInstance()->getListByProduct($this, $params);
  }

  public function getCommentList(array $params = array())
  {
    return ProductCommentTable::getInstance()->getListByProduct($this, $params);
  }

  public function getCommentCount(array $params = array())
  {
	  return ProductCommentTable::getInstance()->getCountByProduct($this, $params);
  }

  public function getUserTagList(array $params = array())
  {
    return UserTagTable::getInstance()->getListByProduct($this->id, $params);
  }

  public function getStockList(array $params = array())
  {
    return StockTable::getInstance()->getListByProduct($this->id, $params);
  }

  public function getShopList(array $params = array())
  {
    return ShopTable::getInstance()->getListByProduct($this->id, $params);
  }

  public function getServiceList(array $params = array())
  {
    return ServiceTable::getInstance()->getListByProduct($this, $params);
  }

  public function getUsersRates()
  {
    $data = UserProductRatingTable::getInstance()->getByProduct($this);
    $result = array();
    $maxPropertyValue = null;
    $maxPropertyId = null;
    foreach ($data as $row)
    {
      if (!isset($result[$row['property_id']]))
      {
        $result[$row['property_id']] = array(
          'value' => 0,
          'count' => 0,
          'name' => $row['Property']['name']
        );
      }
      $result[$row['property_id']]['value'] += $row['value'];
      $result[$row['property_id']]['count']++;
    }
    foreach ($result as $propId => &$prop)
    {
      if ($prop['value'] > $maxPropertyValue)
      {
        $maxPropertyValue = $prop['value'];
        $maxPropertyId = $propId;
      }
      $prop['average'] = round($prop['value'] / $prop['count']);
    }
    $result['max_property_id'] = $maxPropertyId;

    return $result;
  }

  public function getRatingStat()
  {
	  $q = ProductCommentTable::getInstance()->createBaseQuery();
	  $q->andWhere('product_id = ?', $this->id);
	  $q->andWhere('parent_id = 0');
	  $data = $q->fetchArray();
	  $result = array(
		  'count' => 0,
		  'recomends' => 0,
		  'percent' => 0,
		  'rating_average' => 0,
		  'rating_1' => 0,
		  'rating_2' => 0,
		  'rating_3' => 0,
		  'rating_4' => 0,
		  'rating_5' => 0,
	  );
	  $ratingSum = 0;
	  if (count($data) > 0) {
		  foreach ($data as $row) {
			  $result['count']++;
			  if ($row['is_recomend'] == 1) {
				  $result['recomends']++;
			  }
			  $ratingSum += $row['rating'];
			  if ($row['rating'] > 0) {
				  $k = 'rating_'.$row['rating'];
				  $result[$k]++;
			  }
		  }
		  $result['rating_average'] = round($ratingSum/count($data), 2);
		  $result['percent'] = round(($result['recomends']/$result['count'])*100);
	  }
	  return $result;
  }

/*  public function getMainPhoto()
  {
//	if ($this->_mainPhoto === null) {
//		$this->_mainPhoto = ProductPhotoTable::getInstance()->getOneByProduct($this);
//	}
    return isset($this->main_photo) && null !== $this->main_photo ? $this->main_photo : ProductPhotoTable::getInstance()->getOneByProduct($this);
  }*/

  public function getAllPhotos()
  {
	  return ProductPhotoTable::getInstance()->getByProduct($this);
  }

  public function getAll3dPhotos()
  {
	  return ProductPhoto3DTable::getInstance()->getByProduct($this);
  }

  public function getMainPhotoUrl($view = 0)
  {
    return $this->getTable()->getMainPhotoUrl($this, $view);
  }

  public function getMainCategory()
  {
    return isset($this->Category[0]) ? $this->Category[0] : null;
  }
  public function getMainCategoryId()
  {
    return isset($this->Category[0]) ? $this->Category[0]['id'] : null;
  }

  public function getUrl(){
      return '/product/' . $this->token;
  }

  public function countParameter($view = null)
  {
    $count = 0;

    foreach ($this->Parameter as $productParameter)
    {
      // подсчитывает только свойства с определенным видом
      if ((null != $view) && !call_user_func(array($productParameter, 'isView'.ucfirst($view))))
      {
        continue;
      }

      $count++;
    }

    return $count;
  }

  public function getModelProperty()
  {
    $q = ProductPropertyTable::getInstance()->createBaseQuery();

    $q->innerJoin('productProperty.ProductModelRelation productModelRelation WITH productModelRelation.product_id = ?', array($this->is_model ? $this->id : $this->model_id))
      ->innerJoin('productProperty.ProductTypeRelation productTypeRelation WITH productTypeRelation.product_type_id = ?', $this->type_id)
      ->orderBy('productModelRelation.position ASC');


    return $q->execute();
  }

  public function isKit()
  {
    return 2 == $this->set_id;
  }
}
