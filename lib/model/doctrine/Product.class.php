<?php

/**
 * Product
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    enter
 * @subpackage model
 * @author     Связной Маркет
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Product extends BaseProduct
{

  public function construct()
  {
    $this->mapValue('Parameter', new myDoctrineVirtualCollection());
    $this->mapValue('ParameterGroup', new myDoctrineVirtualCollection());
  }

  public function __toString()
  {
    return (string) $this->name;
  }

  public function toParams()
  {
    return array(
      'product' => $this->token,
    );
  }

  public function getIsInsale()
  {
    return $this->is_instock;
  }

  public function getParameterByProperty($property_id)
  {
    $return = null;
    foreach ($this->Parameter as $parameter)
    {
      if ($parameter->getProperty()->id != $property_id)
        continue;

      $return = $parameter;
    }

    return $return;
  }

  public function getFormattedPrice()
  {
    return number_format($this->price, 0, ',', ' ');//.' руб';
  }

  public function getSimilarProduct(array $params = array())
  {
    return SimilarProductTable::getInstance()->getListByProduct($this, $params);
  }

  public function getCommentList(array $params = array())
  {
    return ProductCommentTable::getInstance()->getListByProduct($this, $params);
  }

  public function getUserTagList(array $params = array())
  {
    return UserTagTable::getInstance()->getListByProduct($this->id, $params);
  }

  public function getStockList(array $params = array())
  {
    return StockTable::getInstance()->getListByProduct($this->id, $params);
  }

  public function getShopList(array $params = array())
  {
    return ShopTable::getInstance()->getListByProduct($this->id, $params);
  }

  public function getServiceList(array $params = array())
  {
    return ServiceTable::getInstance()->getListByProduct($this, $params);
  }

  public function getUsersRates()
  {
    $data = UserProductRatingTable::getInstance()->getByProduct($this);
    $result = array();
    $maxPropertyValue = null;
    $maxPropertyId = null;
    foreach ($data as $row)
    {
      if (!isset($result[$row['property_id']]))
      {
        $result[$row['property_id']] = array(
          'value' => 0,
          'count' => 0,
          'name' => $row['Property']['name']
        );
      }
      $result[$row['property_id']]['value'] += $row['value'];
      $result[$row['property_id']]['count']++;
    }
    foreach ($result as $propId => &$prop)
    {
      if ($prop['value'] > $maxPropertyValue)
      {
        $maxPropertyValue = $prop['value'];
        $maxPropertyId = $propId;
      }
      $prop['average'] = round($prop['value'] / $prop['count']);
    }
    $result['max_property_id'] = $maxPropertyId;

    return $result;
  }

  public function getRatingStat()
  {
    $q = ProductCommentTable::getInstance()->createBaseQuery();
    $q->andWhere('product_id = ?', $this->id);
    $q->andWhere('parent_id = 0');
    $data = $q->fetchArray();
    $result = array(
      'count' => 0,
      'recomends' => 0,
      'percent' => 0,
      'rating_average' => 0,
      'rating_1' => 0,
      'rating_2' => 0,
      'rating_3' => 0,
      'rating_4' => 0,
      'rating_5' => 0,
    );
    $ratingSum = 0;
    foreach ($data as $row)
    {
      $result['count']++;
      if ($row['is_recomend'] == 1)
      {
        $result['recomends']++;
      }
      $ratingSum += $row['rating'];
      if ($row['rating'] > 0)
      {
        $k = 'rating_' . $row['rating'];
        $result[$k]++;
      }
    }
    $result['rating_average'] = round($ratingSum / count($data), 2);
    $result['percent'] = round(($result['recomends'] / $result['count']) * 100);

    return $result;
  }
  
  public function getMainPhoto()
  {
    return isset($this->Photo[0]) ? $this->Photo[0] : null;
  }

  public function getMainPhotoUrl($view = 0)
  {
    $urls = sfConfig::get('app_product_photo_url');
    
    return $this->getMainPhoto() ? $urls[$view].$this->getMainPhoto()->resource : null;
  }

  public function getMainCategory()
  {
    return isset($this->Category[0]) ? $this->Category[0] : null;
  }
}
