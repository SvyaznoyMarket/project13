<?php

/**
 * Product
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    enter
 * @subpackage model
 * @author     Связной Маркет
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Product extends BaseProduct
{
	protected $_mainPhoto = null;

	public function construct()
  {
    $this->mapValue('Parameter', new myDoctrineVirtualCollection());
    $this->mapValue('ParameterGroup', new myDoctrineVirtualCollection());
  }

  public function preSave($event)
  {
    $record = $event->getInvoker();

    if (empty($record->token))
    {
      $record->token = !empty($record->barcode) ? trim($record->barcode) : uniqid();
    }
  }

  public function __toString()
  {
    return (string) $this->name;
  }

  public function toParams()
  {
    return array(
      'product' => $this->token,
    );
  }

  public function importFromCore(array $data)
  {
    parent::importFromCore($data);

    // check if creator doesn't exists
    if (!empty($data['brand_id']) && empty($this->creator_id))
    {
      if (!$response = Core::getInstance()->getCreator($data['brand_id']))
      {
        throw new Exception('Can\'t create Creator ##'.$data['brand_id']);
      }

      $creator = new Creator();
      $creator->importFromCore($response);
      $creator->setCorePush(false);
      $creator->save();
    }

    // category relation
    /*
    if (!empty($data['category']))
    {
      $existing = $this->Category->getPrimaryKeys();
      $new = array();

      foreach ($data['category'] as $d)
      {
        if (!$id = ProductCategoryTable::getInstance()->getIdByCoreId($d['id']))
        {
          throw new Exception('Can\'t find ProductCategory ##'.$d['id']);
        }

        $new[] = $id;
      }

      $unlink = array_diff($existing, $new);
      if (count($unlink))
      {
        $this->unlink('Category', $unlink);
      }

      $link = array_diff($new, $existing);
      if (count($link))
      {
        $this->link('Category', $link);
      }
    }
    */
  }

  public function getIsInsale()
  {
    return $this->is_instock;
  }

  public function getParameterByProperty($property_id)
  {
    $return = null;
    foreach ($this->Parameter as $parameter)
    {
      if ($parameter->getProperty()->id != $property_id) continue;

      $return = $parameter;
    }

    return $return;
  }

  public function getFormattedPrice()
  {
    return number_format($this->price, 0, ',', ' ');
  }

  public function getSimilarProduct(array $params = array())
  {
    return SimilarProductTable::getInstance()->getListByProduct($this, $params);
  }

  public function getCommentList(array $params = array())
  {
    return ProductCommentTable::getInstance()->getListByProduct($this, $params);
  }

  public function getCommentCount(array $params = array())
  {
	  return ProductCommentTable::getInstance()->getCountByProduct($this, $params);
  }

  public function getUserTagList(array $params = array())
  {
    return UserTagTable::getInstance()->getListByProduct($this->id, $params);
  }

  public function getStockList(array $params = array())
  {
    return StockTable::getInstance()->getListByProduct($this->id, $params);
  }

  public function getShopList(array $params = array())
  {
    return ShopTable::getInstance()->getListByProduct($this->id, $params);
  }

  public function getServiceList(array $params = array())
  {
    return ServiceTable::getInstance()->getListByProduct($this, $params);
  }

  public function getUsersRates()
  {
    $data = UserProductRatingTable::getInstance()->getByProduct($this);
    $result = array();
    $maxPropertyValue = null;
    $maxPropertyId = null;
    foreach ($data as $row)
    {
      if (!isset($result[$row['property_id']]))
      {
        $result[$row['property_id']] = array(
          'value' => 0,
          'count' => 0,
          'name' => $row['Property']['name']
        );
      }
      $result[$row['property_id']]['value'] += $row['value'];
      $result[$row['property_id']]['count']++;
    }
    foreach ($result as $propId => &$prop)
    {
      if ($prop['value'] > $maxPropertyValue)
      {
        $maxPropertyValue = $prop['value'];
        $maxPropertyId = $propId;
      }
      $prop['average'] = round($prop['value'] / $prop['count']);
    }
    $result['max_property_id'] = $maxPropertyId;

    return $result;
  }

  public function getRatingStat()
  {
	  $q = ProductCommentTable::getInstance()->createBaseQuery();
	  $q->andWhere('product_id = ?', $this->id);
	  $q->andWhere('parent_id = 0');
	  $data = $q->fetchArray();
	  $result = array(
		  'count' => 0,
		  'recomends' => 0,
		  'percent' => 0,
		  'rating_average' => 0,
		  'rating_1' => 0,
		  'rating_2' => 0,
		  'rating_3' => 0,
		  'rating_4' => 0,
		  'rating_5' => 0,
	  );
	  $ratingSum = 0;
	  if (count($data) > 0) {
		  foreach ($data as $row) {
			  $result['count']++;
			  if ($row['is_recomend'] == 1) {
				  $result['recomends']++;
			  }
			  $ratingSum += $row['rating'];
			  if ($row['rating'] > 0) {
				  $k = 'rating_'.$row['rating'];
				  $result[$k]++;
			  }
		  }
		  $result['rating_average'] = round($ratingSum/count($data), 2);
		  $result['percent'] = round(($result['recomends']/$result['count'])*100);
	  }
	  return $result;
  }

/*  public function getMainPhoto()
  {
//	if ($this->_mainPhoto === null) {
//		$this->_mainPhoto = ProductPhotoTable::getInstance()->getOneByProduct($this);
//	}
    return isset($this->main_photo) && null !== $this->main_photo ? $this->main_photo : ProductPhotoTable::getInstance()->getOneByProduct($this);
  }*/

  public function getAllPhotos()
  {
	  return ProductPhotoTable::getInstance()->getByProduct($this);
  }

  public function getAll3dPhotos()
  {
	  return ProductPhoto3DTable::getInstance()->getByProduct($this);
  }

  public function getMainPhotoUrl($view = 0)
  {
    $urls = sfConfig::get('app_product_photo_url');

    return $this->getMainPhoto() ? $urls[$view].$this->getMainPhoto() : null;
  }

  public function getMainCategory()
  {
    return isset($this->Category[0]) ? $this->Category[0] : null;
  }
  public function getMainCategoryId()
  {
    return isset($this->Category[0]) ? $this->Category[0]['id'] : null;
  }

  public function getUrl(){
      return '/product/' . $this->token;
  }

  public function countParameter($view = null)
  {
    $count = 0;

    foreach ($this->Parameter as $productParameter)
    {
      // подсчитывает только свойства с определенным видом
      if ((null != $view) && !call_user_func(array($productParameter, 'isView'.ucfirst($view))))
      {
        continue;
      }

      $count++;
    }

    return $count;
  }
}
