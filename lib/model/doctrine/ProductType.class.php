<?php

/**
 * ProductType
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    enter
 * @subpackage model
 * @author     Связной Маркет
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ProductType extends BaseProductType
{
  public function importFromCore(array $data)
  {
    parent::importFromCore($data);

    // группы тегов
    //myDebug::dump(array(count($this->TagGroupRelation), count($data['tag_group'])));
    $unlink = $this->TagGroupRelation->toKeyValueArray('tag_group_id', 'tag_group_id');
    if (!empty($data['tag_group'])) foreach ($data['tag_group'] as $relationData)
    {
      $tagGroupId = TagGroupTable::getInstance()->getIdByCoreId($relationData['id']);

      $relation = new TagGroupProductTypeRelation();
      $relation->fromArray(array(
        //'product_type_id' => $this->id,
        'tag_group_id'    => $tagGroupId,
        'position'        => $relationData['position'],
      ));
      $this->TagGroupRelation[] = $relation;

      if (array_key_exists($tagGroupId, $unlink))
      {
        unset($unlink[$tagGroupId]);
      }
    }
    if ($this->id && count($unlink))
    {
      $q = Doctrine_Query::create()
        ->delete('TagGroupProductTypeRelation')
        ->where('product_type_id = ?', $this->id)
        ->andWhereIn('tag_group_id', array_values($unlink))
        ->execute()
      ;
    }
    unset($unlink);

    // группы свойств товара
    $unlink = $this->PropertyGroupRelation->toKeyValueArray('property_group_id', 'property_group_id');
    if (!empty($data['property_group'])) foreach ($data['property_group'] as $relationData)
    {
      $propertyGroupId = ProductPropertyGroupTable::getInstance()->getIdByCoreId($relationData['id']);

      $relation = new ProductTypePropertyGroupRelation();
      $relation->fromArray(array(
        'product_type_id'   => $this->id,
        'property_group_id' => $propertyGroupId,
        'position'          => $relationData['position'],
      ));
      $this->PropertyGroupRelation[] = $relation;

      if (array_key_exists($propertyGroupId, $unlink))
      {
        unset($unlink[$propertyGroupId]);
      }
    }
    if ($this->id && count($unlink))
    {
      $q = Doctrine_Query::create()
        ->delete('ProductTypePropertyGroupRelation')
        ->where('product_type_id = ?', $this->id)
        ->andWhereIn('property_group_id', array_values($unlink))
        ->execute()
      ;
    }
    unset($unlink);

    // свойства товара
    $unlink = $this->PropertyRelation->toKeyValueArray('property_id', 'property_id');
    if (!empty($data['property'])) foreach ($data['property'] as $relationData)
    {
      $propertyId = ProductPropertyTable::getInstance()->getIdByCoreId($relationData['id']);

      $relation = new ProductTypePropertyRelation();
      $relation->fromArray(array(
        'product_type_id' => $this->id,
        'property_id'    => $propertyId,
        'group_id'       => ProductPropertyGroupTable::getInstance()->getIdByCoreId($relationData['group_id']),
        'position'       => $relationData['position'],
        'group_position' => $relationData['group_position'],
        'view_show'      => true,
        'view_list'      => $relationData['is_view_list'],
      ));
      $this->PropertyRelation[] = $relation;

      if (array_key_exists($propertyId, $unlink))
      {
        unset($unlink[$propertyId]);
      }
    }
    if ($this->id && count($unlink))
    {
      $q = Doctrine_Query::create()
        ->delete('ProductTypePropertyRelation')
        ->where('product_type_id = ?', $this->id)
        ->andWhereIn('property_id', array_values($unlink))
        ->execute()
      ;
    }
    unset($unlink);
  }
}
