<?php

/**
 * Order
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    enter
 * @subpackage model
 * @author     Связной Маркет
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Order extends BaseOrder
{
  const STATUS_READY     = 6;
  const STATUS_CANCELLED     = 5;

  const TYPE_ORDER = 1;
  const TYPE_PREORDER = 2;
  const TYPE_CUSTOM = 3;
  const TYPE_1CLICK = 9;

  public function construct()
  {
    $this->mapValue('address_metro', null);
    $this->mapValue('address_street', null);
    $this->mapValue('address_number', null);
    $this->mapValue('address_building', null);
    $this->mapValue('address_apartment', null);
    $this->mapValue('address_floor', null);
  }

  public function __toString()
  {
    return (string)$this->token;
  }

  public function toParams()
  {
    return array(
      'order' => $this->token,
    );
  }

  public function getCityName()
  {
    $region = null;

    if (isset($this->Region))
    {
      $region = $this->Region;
    }
    elseif (isset($this->region_id))
    {
      $region = RegionTable::getInstance()->getById($this->region_id);
    }

	  return $region ? $region->name : null;
  }

  public function getAreaName()
  {
    $region = null;

    if (isset($this->Region))
    {
      $region = $this->Region;
    }
    elseif (isset($this->region_id))
    {
      $region = RegionTable::getInstance()->getById($this->region_id);
    }

	  if ($region) {
		  $parent = $region->getParent();
		  if ($parent && $parent->type == 'area') {
			  return $parent->name;
		  }
	  }
	  return null;
  }

  public function getCountryName()
  {
    $region = null;

    if (isset($this->Region))
    {
      $region = $this->Region;
    }
    elseif (isset($this->region_id))
    {
      $region = RegionTable::getInstance()->getById($this->region_id);
    }

	  if (isset($region)) {
		  $parent = $region->getParent();
		  if ($parent && $parent->type == 'country') {
			  return $parent->name;
		  }
		  $parent = $parent->getParent();
		  if ($parent && $parent->type == 'country') {
			  return $parent->name;
		  }
	  }
	  return null;
  }

  public function getPersonTypeName()
  {
    $names = array(
      'individual' => 'физическое лицо',
      'legal'      => 'юридическое лицо',
    );

    return isset($names[$this->person_type]) ? $names[$this->person_type] : null;
  }

  public function exportToCore()
  {
    $data = parent::exportToCore();

    /*
    $data['user_id']              = $this->User->core_id;
    $data['payment_id']           = $this->PaymentMethod->core_id;
    $data['geo_id']               = $this->Region->core_id;
    $data['delivery_type_id']     = $this->DeliveryType->core_id;
    $data['delivery_interval_id'] = $this->DeliveryPeriod->core_id;
    $data['shop_id']              = $this->Shop->core_id;
    $data['address_id']           = $this->UserAddress->core_id;
    $data['satus_id']             = $this->Status->core_id;
    */

    if (!empty($this->core_region_id)) {
      $data['geo_id'] = $this->core_region_id;
    }

    $data['store_id']             = null;
    if (empty($data['type_id'])) {
      $data['type_id'] = self::TYPE_ORDER;
    }

    if (!empty($_SERVER['X-Real-IP'])) {
      $data['ip'] = $_SERVER['X-Real-IP'];
    }
    elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {
      $data['ip'] = $_SERVER['HTTP_X_FORWARDED_FOR'];
    }
    elseif (!empty($_SERVER['REMOTE_ADDR'])) {
      $data['ip'] = $_SERVER['REMOTE_ADDR'];
    }
    else {
      $data['ip'] = null;
    }

    $data['mode_id'] = $data['delivery_type_id'];
    #myDebug::dump($this);

    if (isset($this->ProductRelation))
    {
      foreach ($this->ProductRelation as $product)
      {
            $data['product'][] = array(
              'id'          => $product->Product->core_id,
              'quantity'    => $product->quantity,
            );
            $productCoreIdList[ $product->Product->id ] = $product->Product->core_id;
      }
    }
    if (isset($this->ServiceRelation))
    {
      foreach ($this->ServiceRelation as $service)
      {
            #echo 'next';
            if (!$service->product_id) {
                $productId = 0;
            } elseif ($service->product_id > 0 && isset($productCoreIdList[ $service->product_id ])) {
                $productId = $productCoreIdList[ $service->product_id ];
            } else {
                $productOb = ProductTable::getInstance()->getById($service->product_id);
                $productId = $productOb->core_id;
                if (!$productId) {
                    $productId = 0;
                }
            }
            if ($productId<0) {
                $productId = 0;
            }
            $data['service'][] = array(
              'id'          => $service->Service->core_id,
              'product_id'  => $productId,
              'quantity'    => $service->quantity,
            );
      }
    }

    return $data;
  }

  public function importFromCore(array $data)
  {
    parent::importFromCore($data);

    $this->token = empty($this->token) ? (uniqid().'-'.myToolkit::urlize($this->number)) : $this->token;

    //$this->type = 1 == $data['type_id'] ? 'order' : 'preorder';

    // check if user doesn't exists
    if (!empty($data['user_id']) && empty($this->user_id))
    {
      if (!$response = Core::getInstance()->getUser($data['user_id']))
      {
        throw new Exception('Can\'t create User ##'.$data['user_id']);
      }

      $user = new User();
      $user->importFromCore($response);
      $user->setCorePush(false);
      $user->save();
    }

    //Импорт продуктов
    $product_ids = array();
    foreach ($this->ProductRelation as $productRelation)
    {
      $product_ids[$productRelation['product_id']] = $productRelation['product_id'];
    }

    if (isset($data['product']))
    {
      foreach ($data['product'] as $relationData)
      {
        $productOrder = new OrderProductRelation();
        $productOrder->importFromCore($relationData);
        $this->ProductRelation[] = $productOrder;
        unset($product_ids[$productOrder['product_id']]);
      }
    }
    //Удаляю все, что лишнее
    if ($this->id && count($product_ids))
    {
      $q = Doctrine_Query::create()
        ->delete('OrderProductRelation')
        ->where('order_id = ?', $this->id)
        ->andWhereIn('product_id', array_values($product_ids))
      ;

      $deleted = $q->execute();
    }

  }

  public function isOnlinePayment()
  {
    return in_array($this->payment_method_id, array(3,));
  }

  public function isSelfDelivery()
  {
    return 'self' == $this->DeliveryType->token;
  }

}
