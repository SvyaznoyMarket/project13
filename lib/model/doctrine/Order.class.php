<?php

/**
 * Order
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    enter
 * @subpackage model
 * @author     Связной Маркет
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Order extends BaseOrder
{
  public function __toString()
  {
    return (string)$this->token;
  }

  public function toParams()
  {
    return array(
      'order' => $this->token,
    );
  }

  public function getPersonTypeName()
  {
    $names = array(
      'individual' => 'физическое лицо',
      'legal'      => 'юридическое лицо',
    );

    return isset($names[$this->person_type]) ? $names[$this->person_type] : null;
  }

  public function exportToCore()
  {
    $data = parent::exportToCore();

    $data['user_id']              = $this->User->core_id;
    $data['payment_id']           = $this->PaymentMethod->core_id;
    $data['geo_id']               = $this->Region->core_id;
    $data['delivery_type_id']     = $this->DeliveryType->core_id;
    $data['delivery_interval_id'] = $this->DeliveryPeriod->core_id;
    $data['shop_id']              = $this->Shop->core_id;
    $data['address_id']           = $this->UserAddress->core_id;
    $data['satus_id']             = $this->Status->core_id;
    $data['store_id']             = null;
    $data['type_id']              = 1;
    $data['ip']                   = isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : null; //sfContext::getInstance()->getUser()->getIp();


    if (isset($this->ProductRelation))
    {
      foreach ($this->ProductRelation as $product)
      {
        $data['product'][] = array(
          'id'          => $product->Product->core_id,
          'price'       => $product->price,
          'quantity'    => $product->quantity,
        );
      }
    }

    return $data;
  }

  public function importFromCore(array $data)
  {
    parent::importFromCore($data);

    //$this->type = 1 == $data['type_id'] ? 'order' : 'preorder';

    // User
    $this->user_id = UserTable::getInstance()->getByCoreId($data['user_id']);
    if (!empty($data['user_id']) && empty($this->user_id))
    {
      if (!$data = Core::getInstance()->getUser($data['user_id']))
      {
        throw new Exception('Can\'t create User ##'.$data['user_id']);
      }

      $user = new User();
      $user->importFromCore($data);
      $user->setCorePush(false);
      $user->save();
    }

    $this->status_id = OrderStatusTable::getInstance()->getIdByCoreId($data['status_id']);
  }

  public function isOnlinePayment()
  {
    return in_array($this->payment_method_id, array(3,));
  }

  public function isSelfDelivery()
  {
    return 'self' == $this->DeliveryType->token;
  }

}
