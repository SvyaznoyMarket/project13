TagGroup:
  options:
    comment: 'Группа тега'
  actAs: [ Timestampable ]
  columns:
    id:                { type: integer(20), autoincrement: true, primary: true }
    core_id:           { type: integer(20), notnull: false, default: null, comment: 'ид записи в Core' }
    token:             { type: string(255), unique: true, notnull: true, notblank: true }
    name:              { type: string(255), notnull: true, notblank: true }
    type:              { type: set, length: 10, values: [gift], notnull: false, default: null, comment: 'Тип группы тега' }
    position:          { type: integer(4), notnull: true, default: 1, comment: 'Порядок сортировки' }
  relations:
    ProductCategory:   { class: ProductCategory, foreignAlias: TagGroup, refClass: TagGroupProductCategoryRelation, local: tag_group_id, foreign: product_category_id, type: many, foreignType: many }

TagGroupProductTypeRelation:
  options:
    comment: 'Связь группы тега и типа товара'
  actAs: [ Timestampable ]
  columns:
    tag_group_id:        { type: integer(20), primary: true, notnull: true }
    product_type_id:     { type: integer(20), primary: true, notnull: true }
  relations:
    TagGroup:            { class: TagGroup, foreignAlias: ProductTypeRelation, local: tag_group_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }
    ProductType:         { class: ProductType, foreignAlias: TagGroupRelation, local: product_type_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }

Tag:
  options:
    comment: 'Тег'
  actAs: [ Timestampable ]
  columns:
    id:                { type: integer(20), autoincrement: true, primary: true }
    core_id:           { type: integer(20), notnull: false, default: null, comment: 'ид записи в Core' }
    group_id:          { type: integer(20), notnull: false, default: null }
    token:             { type: string(255), unique: true, notnull: true, notblank: true }
    name:              { type: string(255), notnull: true, notblank: true }
  relations:
    Group:             { class: TagGroup, foreignAlias: Tag, refClass: TagGroupRelation, local: tag_id, foreign: group_id, type: many, foreignType: many }
    Product:           { class: Product, foreignAlias: Tag, refClass: TagProductRelation, local: tag_id, foreign: product_id, type: many, foreignType: many }

TagGroupRelation:
  options:
    comment: 'Связь тега и группы тегов'
  actAs: [ Timestampable ]
  columns:
    tag_id:            { type: integer(20), primary: true, notnull: true }
    group_id:          { type: integer(20), primary: true, notnull: true }
  relations:
    Tag:               { class: Tag, foreignAlias: GroupRelation, local: tag_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }
    Group:             { class: TagGroup, foreignAlias: TagRelation, local: group_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }

TagProductRelation:
  options:
    comment: 'Связь тега и товара'
  actAs: [ Timestampable ]
  columns:
    tag_id:            { type: integer(20), primary: true, notnull: true }
    product_id:        { type: integer(20), primary: true, notnull: true }
  relations:
    Tag:               { class: Tag, foreignAlias: ProductRelation, local: tag_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }
    Product:           { class: Product, foreignAlias: TagRelation, local: product_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }

TagGroupProductCategoryRelation:
  options:
    comment: 'Связь тега и категории товара'
  actAs: [ Timestampable ]
  columns:
    tag_group_id:        { type: integer(20), primary: true, notnull: true }
    product_category_id: { type: integer(20), primary: true, notnull: true }
  relations:
    TagGroup:            { class: TagGroup, foreignAlias: ProductCategoryRelation, local: tag_group_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }
    ProductCategory:     { class: ProductCategory, foreignAlias: TagGroupRelation, local: product_category_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }