PaymentMethod:
  options:
    comment: 'Способ оплаты'
  actAs:
    Timestampable:  ~
    Corable:        { push: disable }
  columns:
    id:                { type: integer(20), autoincrement: true, primary: true }
    core_id:           { type: integer(20), notnull: false, default: null, comment: 'ид записи в Core' }
    token:             { type: string(255), unique: true, notnull: true, notblank: true }
    name:              { type: string(255), notnull: true, notblank: true }
    description:       { type: string(500), notnull: true, notblank: true }
    is_active:         { type: boolean, notnull: true, default: false, comment: 'Способ оплаты активен?' }
    is_legal:          { type: boolean, notnull: true, default: false, comment: 'Этот способ оплаты доступен для юр. лиц?' }
    is_personal:       { type: boolean, notnull: true, default: false, comment: 'Этот способ оплаты доступен для физ. лиц?' }

DeliveryType:
  options:
    comment: 'Тип доставки'
  actAs:
    Timestampable:  ~
    Corable:        { push: disable }
  columns:
    id:                { type: integer(20), autoincrement: true, primary: true }
    core_id:           { type: integer(20), notnull: false, default: null, comment: 'ид записи в Core' }
    token:             { type: string(255), unique: true, notnull: true, notblank: true }
    name:              { type: string(255), notnull: true, notblank: true }
    description:       { type: string(500), notnull: true, notblank: true }
    is_active:         { type: boolean, notnull: true, default: false, comment: 'Тип доставки активен?' }

DeliveryPeriod:
  options:
    comment: 'Периоды времени для доставки'
  actAs:
    Corable:           { push: disable }
  columns:
    id:                { type: integer(20), autoincrement: true, primary: true }
    name:              { type: string(255), notnull: true, notblank: true }

Order:
  options:
    comment: 'Заказ пользователя'
  actAs: [ Timestampable, Corable ]
  columns:
    id:                     { type: integer(20), autoincrement: true, primary: true }
#    core_id:           { type: integer(20), notnull: false, default: null, comment: 'ид записи в Core' }
    token:                  { type: string(64), unique: true, notnull: true, notblank: true, comment: 'Номер заказа' }
    type_id:                { type: integer(20), notnull: true, default: 1 }
    user_id:                { type: integer(20), notnull: false, default: null }
    payment_method_id:      { type: integer(20), notnull: false, default: null }
    payment_status_id:      { type: integer(20), notnull: true, default: 1 }
    payment_details:        { type: string(500), notnull: false, default: null }
    sum:                    { type: 'decimal(12,2)', notnull: true, default: 0, comment: 'Стоимость заказа' }
#    person_type:            { type: enum, length: 10, values: [individual, legal], notnull: false, default: null }
    is_legal:               { type: boolean, notnull: true, default: false, comment: 'Юр лицо?' }
    region_id:              { type: integer(20), notnull: false, default: null }
#    receipt_type:           { type: enum, length: 10, values: [pickup, delivery], notnull: false, default: null, comment: 'Тип получения: доставка или самовывоз' }
    shop_id:                { type: integer(20), notnull: false, default: null }
    store_id:               { type: integer(20), notnull: false, default: null, comment: 'Рассчитывается при доставке' }
    is_delivery:            { type: boolean, notnull: true, default: true, comment: 'Нужна ли доставка? (нужна всегда)' }
    is_paid_delivery:       { type: boolean, notnull: true, default: false, comment: 'Какая-то срань для core' }
    delivery_type_id:       { type: integer(20), notnull: false, default: null } # стандартная, экспресс
    delivered_at:           { type: timestamp, format: Y-m-d H:m:i, comment: 'Дата доставки' }
    delivery_period_id:     { type: integer(20), notnull: false, default: null }
    address:                { type: string, notnull: false, default: null, comment: 'Адрес доставки или получения' }
    zip_code:               { type: string(10), notnull: false, default: null, comment: 'Индекс' }
    user_address_id:        { type: integer(20), notnull: false, default: null, comment: 'Сохраненный адрес пользователя'}
    recipient_first_name:   { type: string(255), notnull: false, default: null, comment: 'Имя получателя' }
    recipient_last_name:    { type: string(255), notnull: false, default: null, comment: 'Фамилия получателя' }
    recipient_middle_name:  { type: string(255), notnull: false, default: null, comment: 'Отчество получателя' }
    recipient_phonenumbers: { type: string(255), notnull: false, default: null, comment: 'Телефоны получателя' }
    is_receive_sms:         { type: boolean, notnull: true, default: false, comment: 'Получать смс об изменении статуса заказа?' }
    is_gift:                { type: boolean, notnull: true, default: false, comment: 'Это подарок?' }
    extra:                  { type: string }
    ip:                     { type: string(50), notnull: false, default: null }
    step:                   { type: integer(4), notnull: false, default: null, comment: 'Шаг заказа' }
  relations:
    User:                   { class: User, foreignAlias: Order, local: user_id, foreign: id, type: one, foreignType: many, onDelete: SET NULL }
    PaymentMethod:          { class: PaymentMethod, foreignAlias: Order, local: payment_method_id, foreign: id, type: one, foreignType: many, onDelete: SET NULL }
#    PaymentStatus:          { class: PaymentStatus, foreignAlias: Order, local: payment_status_id, foreign: id, type: one, foreignType: many, onDelete: SET NULL }
    Shop:                   { class: Shop, foreignAlias: Order, local: shop_id, foreign: id, type: one, foreignType: many, onDelete: SET NULL }
    DeliveryType:           { class: DeliveryType, foreignAlias: Order, local: delivery_type_id, foreign: id, type: one, foreignType: many, onDelete: SET NULL }
    DeliveryPeriod:         { class: DeliveryPeriod, foreignAlias: Order, local: delivery_period_id, foreign: id, type: one, foreignType: many, onDelete: SET NULL }
    UserAddress:            { class: UserAddress, foreignAlias: Order, local: user_address_id, foreign: id, type: one, foreignType: many, onDelete: SET NULL }
    Region:                 { class: Region, autoComplete: false, local: region_id, foreign: id, type: one, onDelete: SET NULL }
    Product:                { class: Product, foreignAlias: Order, refClass: OrderProductRelation, local: order_id, foreign: product_id, type: many, foreignType: many }

OrderProductRelation:
  options:
    comment: 'Связь заказа и товара'
  actAs: [ Timestampable ]
  columns:
    order_id:          { type: integer(20), notnull: true, primary: true }
    product_id:        { type: integer(20), notnull: true, primary: true }
    price:             { type: 'decimal(12,2)', notnull: true, default: 0, comment: 'Цена товара в корзине' }
    quantity:          { type: integer(4), notnull: true, comment: 'Количество товара в корзине' }
    position:          { type: integer(4), notnull: true, default: 1, comment: 'Порядок сортировки' }
  relations:
    Order:             { class: Order, foreignAlias: ProductRelation, local: order_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }
    Product:           { class: Product, foreignAlias: OrderRelation, local: product_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }

OrderServiceRelation:
  options:
    comment: 'Связь товара в заказе и услуги F1'
  actAs: [ Timestampable ]
  columns:
    order_id:          { type: integer(20), notnull: true }
    product_id:        { type: integer(20), notnull: true }
    service_id:        { type: integer(20), notnull: true }
    price:             { type: 'decimal(12,2)', notnull: true, default: 0, comment: 'Цена товара в корзине' }
    quantity:          { type: integer(4), notnull: true, comment: 'Количество товара в корзине' }
  relations:
    Order:             { class: Order, foreignAlias: ProductRelation, local: order_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }
    Product:           { class: Product, foreignAlias: OrderRelation, local: product_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }
    Service:           { class: Service, foreignAlias: OrderRelation, local: service_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }

#PaymentStatus:
#  options:
#    comment: 'Статус оплаты заказа'
#  columns:
#    id:                { type: integer(20), autoincrement: true, primary: true }
#    token:             { type: string(255), unique: true, notnull: true, notblank: true }
#    name:              { type: string(255), notnull: true, notblank: true }
