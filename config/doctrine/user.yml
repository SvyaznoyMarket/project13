User:
  options:
    comment: 'Пользователь'
  inheritance: { type: simple, extends: GuardUser }
  columns:
    type:              { type: enum, length: 10, values: [admin, client, partner], notnull: true, default: client }
    phonenumber:       { type: string(20), notnull: false, default: null, comment: 'Телефонный номер' }
    first_name:        { type: string(255), notnull: true, notblank: true, comment: 'Имя' }
    last_name:         { type: string(255), notnull: true, notblank: true, comment: 'Фамилия' }
    middle_name:       { type: string(255), notnull: true, notblank: true, comment: 'Отчество' }
    photo:             { type: string(255), notnull: false, default: null, comment: 'Фото' }
    settings:          { type: string, notnull: false, default: null, comment: 'Настройки личного кабинета' }

UserProfile:
  options:
    comment: 'Профайл пользователя'
  columns:
    id:                { type: integer(20), autoincrement: true, primary: true }
    source_id:         { type: string(255), notnull: true, comment: 'Идентификатор в социальной сети' }
    type:              { type: enum, length: 14, values: [ vkontakte, facebook, twitter, odnoklassniki, gmail, mailru, live_journal, yandex ], notnull: false, default: null, comment: 'Тип профайла' }
    user_id:           { type: integer(20), notnull: true }
    content:           { type: string, notnull: false, default: null, comment: 'Данные пользователя в формате yaml' }
  relations:
    User:              { class: User, foreignAlias: Profile, local: user_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }

UserTag:
  options:
    comment: 'Пользовательские теги'
  columns:
    id:                { type: integer(20), autoincrement: true, primary: true }
    name:              { type: string(255), notnull: true, notblank: true }
    user_id:           { type: integer(20), notnull: true }
    position:          { type: integer(4), notnull: true, default: 1, comment: 'Порядок сортировки' }
  relations:
    User:              { class: User, foreignAlias: Tag, local: user_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }

UserTagProductRelation:
  options:
    comment: 'Связь пользовательских тегов и товаров'
  columns:
    tag_id:            { type: integer(20), primary: true, notnull: true }
    product_id:        { type: integer(20), primary: true, notnull: true }
    position:          { type: integer(4), notnull: true, default: 1, comment: 'Порядок сортировки' }
  relations:
    Tag:               { class: UserTag, foreignAlias: ProductRelation, local: tag_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }
    Product:           { class: Product, foreignAlias: UserTagRelation, local: product_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }

UserDelayedProduct:
  options:
    comment: 'Отложенные товары пользователя'
  columns:
    user_id:           { type: integer(20), primary: true, notnull: true }
    product_id:        { type: integer(20), primary: true, notnull: true }
    is_wished:         { type: boolean, notnull: true, default: false }
  relations:
    User:              { class: User, foreignAlias: DelayedProduct, local: user_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }
    Product:           { class: Product, foreignAlias: UserDelayedProduct, local: product_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }

UserProductNotice:
  options:
    comment: 'Пользовательские уведомления о товаре'
  columns:
    type:              { type: enum, length: 10, primary: true, values: [ insale, price, comment ], notnull: true, comment: 'Тип уведомления: товар появился в магазинах, изменилась цена, появились отзывы' }
    email:             { type: string(50), primary: true, notnull: true }
    product_id:        { type: integer(20), primary: true, notnull: true }
    user_id:           { type: integer(20), notnull: false, default: null }
  relations:
    User:              { class: User, foreignAlias: ProductNotice, local: user_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }
    Product:           { class: Product, foreignAlias: UserNotice, local: product_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }

UserProductRating:
  options:
    comment: 'Пользовательские оценки товара'
  columns:
    property_id:       { type: integer(20), primary: true, notnull: true }
    user_id:           { type: integer(20), primary: true, notnull: true }
    product_id:        { type: integer(20), primary: true, notnull: true }
    value:             { type: 'decimal(18,14)', notnull: true, default: 0, comment: 'Рейтинг товара' }
  relations:
    Property:          { class: ProductRatingTypeProperty, foreignAlias: ProductRatingTypeProperty, local: property_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }
    User:              { class: User, foreignAlias: ProductRating, local: user_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }
    Product:           { class: Product, foreignAlias: UserRating, local: product_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }

UserAddress:
  options:
    comment: 'Адрес пользователя для доставки'
  columns:
    id:                { type: integer(20), autoincrement: true, primary: true }
    user_id:           { type: integer(20), notnull: true }
    city_id:           { type: integer(20), notnull: true }
    name:              { type: string(255), notnull: false, default: null }
    address:           { type: string, notnull: true }
  relations:
    User:              { class: User, foreignAlias: Address, local: user_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }
    City:              { class: Region, foreignAlias: UserAddress, local: city_id, foreign: id, type: one, foreignType: many, onDelete: RESTRICT }
