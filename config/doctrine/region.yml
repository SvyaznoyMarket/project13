Region:
  options:
    comment: 'Регион'
  actAs:
    NestedSet:     { hasManyRoots: true, rootColumnName: root_id }
    Timestampable: ~
    Corable:       { push: disable }
  columns:
    id:                     { type: integer(20), autoincrement: true, primary: true }
    core_id:                { type: integer(20), notnull: false, default: null, comment: 'ид записи в Core' }
    core_parent_id:         { type: integer(20), notnull: false, default: null, comment: 'ид родителя записи в Core' }
    root_id:                { type: integer(20), notnull: false }
    product_price_list_id:  { type: integer(20), notnull: false }
    stock_id:               { type: integer(20), notnull: true }
    root_id:                { type: integer(20), notnull: true }
    lft:                    { type: integer(20), notnull: true }
    rgt:                    { type: integer(20), notnull: true }
    level:                  { type: integer(4), notnull: true }
    token:                  { type: string(255), unique: true, notnull: true, notblank: true }
    name:                   { type: string(255), notnull: true, notblank: true }
    type:                   { type: set, length: 10, values: [country, area, city], notnull: true, default: 'city', comment: 'Тип региона: страна, административная единица, город' }
    is_default:             { type: boolean, notnull: true, default: false, comment: 'Регион по-умолчанию?' }
    latitude:               { type: 'decimal(8,6)', notnull: false, default: null, comment: 'Широта' }
    longitude:              { type: 'decimal(8,6)', notnull: false, default: null, comment: 'Долгота' }
    geoip_code:             { type: string(50), notnull: false, default: null, comment: 'Код региона для geo_ip' }
  relations:
    PriceList:              { class: ProductPriceList, foreignAlias: Region, local: product_price_list_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }
    Stock:                  { class: Stock, foreignAlias: Region, local: stock_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }
