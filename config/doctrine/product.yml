Creator:
  options:
    comment: 'Производитель'
  columns:
    id:                { type: integer(20), autoincrement: true, primary: true }
    token:             { type: string(255), unique: true, notnull: true, notblank: true }
    name:              { type: string(255), notnull: true, notblank: true }

ProductFilterGroup:
  options:
    comment: 'Группа фильтров товаров'
  columns:
    id:                { type: integer(20), autoincrement: true, primary: true }
    name:              { type: string(255), notnull: true, notblank: true }

ProductFilter:
  options:
    comment: 'Фильтр товара'
  columns:
    id:                { type: integer(20), autoincrement: true, primary: true }
    name:              { type: string(255), notnull: true, notblank: true }
    type:              { type: enum, length: 10, values: [choice, range], notnull: true }
    group_id:          { type: integer(20), notnull: true }
    property_id:       { type: integer(20), notnull: true }
    is_multiple:       { type: boolean, notnull: true, default: false, comment: 'Фильтр имеет несколько значений?' }
    position:          { type: integer(4), notnull: true, default: 1, comment: 'Порядок сортировки' }
  relations:
    Group:             { class: ProductFilterGroup, foreignAlias: Filter, local: group_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }
    Property:          { class: ProductProperty, foreignAlias: ProductFilter, local: property_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }

ProductCategory:
  options:
    comment: 'Категория товара'
  actAs:
    NestedSet: { hasManyRoots: true, rootColumnName: root_id }
  columns:
    id:                { type: integer(20), autoincrement: true, primary: true }
    root_id:           { type: integer(20), notnull: true }
    lft:               { type: integer(20), notnull: true }
    rgt:               { type: integer(20), notnull: true }
    level:             { type: integer(4), notnull: true }
    token:             { type: string(255), unique: true, notnull: true, notblank: true }
    name:              { type: string(255), notnull: true, notblank: true }
    filter_group_id:   { type: integer(20), notnull: false, default: null }
  relations:
    FilterGroup:       { class: ProductFilterGroup, foreignAlias: Category, local: filter_group_id, foreign: id, type: one, foreignType: many, onDelete: SET NULL }

ProductType:
  options:
    comment: 'Тип товара'
  columns:
    id:                { type: integer(20), autoincrement: true, primary: true }
    name:              { type: string(255), notnull: true, notblank: true }

ProductProperty:
  options:
    comment: 'Свойство товара'
  columns:
    id:                { type: integer(20), autoincrement: true, primary: true }
    name:              { type: string(255), notnull: true, notblank: true }
    type:              { type: enum, length: 10, values: [ string, select, integer, float, text ], notnull: true, default: string, comment: 'Тип свойства: строка, значение из справочника (опция свойства), текст' }
    is_multiple:       { type: boolean, notnull: true, default: false, comment: 'Свойство имеет несколько значений?' }
    pattern:           { type: string(255), notnull: false, default: '%value% %unit%', comment: 'Шаблон для создания значения свойства с единицей измерения для отображения' }
  relations:
    ProductType:       { class: ProductType, foreignAlias: Property, refClass: ProductTypePropertyRelation, local: property_id, foreign: product_type_id, type: many, foreignType: many }

ProductPropertyGroup:
  options:
    comment: 'Группа свойств товара'
  columns:
    name:              { type: string(255), notnull: false, default: null }
    product_type_id:   { type: integer(20), notnull: true }
    position:          { type: integer(4), notnull: true, default: 1, comment: 'Порядок сортировки' }
  relations:
    ProductType:       { class: ProductType, foreignAlias: PropertyGroup, local: product_type_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }

ProductTypePropertyRelation:
  options:
    comment: 'Связь типов и свойств товара'
  columns:
    name:              { type: string(255), notnull: false, default: null }
    product_type_id:   { type: integer(20), notnull: true }
    property_id:       { type: integer(20), notnull: true }
    group_id:          { type: integer(20), notnull: false, default: null }
    position:          { type: integer(4), notnull: true, default: 1, comment: 'Порядок сортировки' }
    group_position:    { type: integer(4), notnull: true, default: 1, comment: 'Порядок сортировки в группе свойств товара' }
    view_show:         { type: boolean, notnull: true, default: false, comment: 'Показывать свойство в карточке товара?' }
    view_list:         { type: boolean, notnull: true, default: false, comment: 'Показывать свойство в списке товаров?' }
  relations:
    ProductType:       { class: ProductType, foreignAlias: PropertyRelation, local: product_type_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }
    Property:          { class: ProductProperty, foreignAlias: ProductTypeRelation, local: property_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }
    Group:             { class: ProductPropertyGroup, foreignAlias: PropertyRelation, local: group_id, foreign: id, type: one, foreignType: many, onDelete: SET NULL }

ProductPropertyOption:
  options:
    comment: 'Опции свойства товара'
  columns:
    id:                { type: integer(20), autoincrement: true, primary: true }
    property_id:       { type: integer(20), notnull: true }
    value:             { type: string(255), notnull: true, notblank: true, comment: 'Значение опции' }
    unit:              { type: string(255), notnull: false, default: null, comment: 'Единица измерения' }
    position:          { type: integer(4), notnull: true, default: 1, comment: 'Порядок сортировки' }
  relations:
    Property:          { class: ProductProperty, foreignAlias: Option, local: property_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }

Product:
  options:
    comment: 'Товар'
  listeners: [ ProductListener ]
  columns:
    id:                { type: integer(20), autoincrement: true, primary: true }
    token:             { type: string(255), unique: true, notnull: true, notblank: true }
    name:              { type: string(255), notnull: true, notblank: true }
    type_id:           { type: integer(20), notnull: true }
    creator_id:        { type: integer(20), notnull: true }
    category_id:       { type: integer(20), notnull: true }
    view_show:         { type: boolean, notnull: true, default: false, comment: 'Показывать товар по прямой ссылке?' }
    view_list:         { type: boolean, notnull: true, default: false, comment: 'Показывать товар в списке категорий?' }
    description:       { type: text, notnull: false, default: null, comment: 'Описание товара' }
    rating:            { type: 'decimal(18,14)', notnull: true, default: 0, comment: 'Рейтинг товара' }
    price:             { type: 'decimal(12,2)', notnull: true, default: 0, comment: 'Цена товара' }
  relations:
    Type:              { class: ProductType, foreignAlias: Product, local: type_id, foreign: id, type: one, foreignType: many, onDelete: RESTRICT }
    Creator:           { class: Creator, foreignAlias: Product, local: creator_id, foreign: id, type: one, foreignType: many, onDelete: RESTRICT }
    Category:          { class: ProductCategory, foreignAlias: Product, local: category_id, foreign: id, type: one, foreignType: many, onDelete: RESTRICT }

ProductPropertyRelation:
  options:
    comment: 'Связь продукта и свойства продукта'
  columns:
    id:                { type: integer(20), autoincrement: true, primary: true }
    name:              { type: string(255), notnull: false, default: null }
    product_id:        { type: integer(20), notnull: true }
    property_id:       { type: integer(20), notnull: true }
    option_id:         { type: integer(20), notnull: false, default: null }
    value_integer:     { type: integer(20), notnull: false, default: null }
    value_float:       { type: 'decimal(10,4)', notnull: false, default: null }
    value_string:      { type: string(255), notnull: false, default: null }
    value_text:        { type: string, notnull: false, default: null }
    value:             { type: string(255), notnull: false, default: null, comment: 'Значение свойства для отображения' }
    unit:              { type: string(255), notnull: false, default: null, comment: 'Единица измерения' }
  relations:
    Product:           { class: Product, foreignAlias: PropertyRelation, local: product_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }
    Property:          { class: ProductProperty, foreignAlias: ProductRelation, local: property_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }
    Option:            { class: ProductPropertyOption, foreignAlias: ProductPropertyRelation, local: option_id, foreign: id, type: one, foreignType: many, onDelete: SET NULL }

ProductPhoto:
  options:
    comment: 'Фото товара'
  columns:
    id:                { type: integer(20), autoincrement: true, primary: true }
    name:              { type: string(255), notnull: true, notblank: true }
    resource:          { type: string(255), notnull: true, notblank: true }
    product_id:        { type: integer(20), notnull: true }
    view_show:         { type: boolean, notnull: true, default: false, comment: 'Показывать фото в карточке товара?' }
    view_list:         { type: boolean, notnull: true, default: false, comment: 'показывать фото в списке товаров?' }
  relations:
    Product:           { class: Product, foreignAlias: Photo, local: product_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }

ProductComment:
  options:
    comment: 'Комментарии товара'
  columns:
    id:                { type: integer(20), autoincrement: true, primary: true }
    product_id:        { type: integer(20), notnull: true }
    user_id:           { type: integer(20), notnull: true }
    content:           { type: string(255), notnull: true, notblank: true, comment: 'Текст комментария' }
    helpful:           { type: integer(4), notnull: true, default: 0, comment: 'Количество полезных оценок отзыва' }
    unhelpful:         { type: integer(4), notnull: true, default: 0, comment: 'Количество бесполезных оценок отзыва' }
  relations:
    Product:           { class: Product, foreignAlias: Comment, local: product_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }
    User:              { class: sfGuardUser, foreignAlias: Comment, local: user_id, foreign: id, type: one, foreignType: many, onDelete: CASCADE }

